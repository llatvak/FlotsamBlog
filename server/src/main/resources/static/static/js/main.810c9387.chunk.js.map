{"version":3,"sources":["components/BlogPostCard.js","components/NavBar.js","components/Main.js","components/NewBlogPost.js","serviceWorker.js","index.js","App.js"],"names":["BlogPost","props","post","route","id","Image","size","Container","src","Content","title","subtitle","description","as","Link","to","color","onClick","event","console","log","axios","delete","then","response","catch","error","alert","Footer","date","NavBar","category","useState","navbarOpen","setNavbarOpen","categories","setCategories","useEffect","get","data","active","Brand","Item","alt","Burger","Menu","Segment","align","map","key","kind","placeholder","icon","faSearch","Main","posts","setPosts","Group","vcentered","multiline","boxStyle","margin","buttonStyle","marginRight","setTitle","setDescription","Date","setDate","blogpost","image","getDate","getMonth","getFullYear","style","value","onChange","e","target","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","path","exact","component","NewBlogPost","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.810c9387.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, Button, Title, Image } from \"rbx\";\r\nimport { Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\nexport default function BlogPost(props) {\r\n    const { post } = props;\r\n    const url = 'https://my-json-server.typicode.com/mkauha/JSON-server-demo/blogposts/{post.id}';\r\n    const route = `/${post.id}`\r\n\r\n    function onReadMore(event) {\r\n        console.log('Read more ' + route);\r\n    }\r\n\r\n    function onDelete(event) {\r\n        axios\r\n            .delete(url)\r\n            .then(response => {\r\n                console.log(response)\r\n            })\r\n            .catch(error => {\r\n                alert(`Error: Post ${post.id} was not deleted`)\r\n            })\r\n            console.log('delete');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <Card.Image size='4by3'>\r\n                    <Image.Container size=\"4by3\">\r\n                        <Image src=\"https://source.unsplash.com/random\" />\r\n                    </Image.Container>\r\n                </Card.Image>\r\n\r\n                <Card.Content>\r\n                    <Title>{post.title}</Title>\r\n                    <Title subtitle>{post.description}</Title>\r\n                    <Button as={Link} to={route} color=\"primary\" onClick={onReadMore}>Read more</Button>\r\n                    <Button color=\"danger\" onClick={onDelete}>Delete</Button>\r\n                </Card.Content>\r\n                <Card.Footer>\r\n                    {post.date}\r\n                </Card.Footer>\r\n\r\n            </Card>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Navbar, Button, Control, Input, Field, Icon} from \"rbx\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default function NavBar(props) {\r\n    const { category } = props;\r\n    const [navbarOpen, setNavbarOpen] = useState(true);\r\n    const [categories, setCategories] = useState([])\r\n\r\n    const url = 'https://my-json-server.typicode.com/mkauha/JSON-server-demo/categories';\r\n\r\n\r\n    useEffect(() => {\r\n        axios\r\n         .get(url)\r\n         .then(response => {\r\n            setCategories(response.data);\r\n         }).catch(error => {\r\n           alert(`Backend error: ${error}`)\r\n       })\r\n     }, [])\r\n    return (\r\n        <div>\r\n            <Navbar active={navbarOpen} >\r\n                <Navbar.Brand>\r\n                    <Navbar.Item>\r\n                        <img src=\"logo.png\" alt=\"logo\" />\r\n                    </Navbar.Item>\r\n                <Navbar.Burger onClick={() => setNavbarOpen(!navbarOpen)}/>\r\n                </Navbar.Brand>\r\n                \r\n                <Navbar.Menu>\r\n                    <Navbar.Segment align=\"start\">\r\n                         {categories.map(category => (\r\n                            <Navbar.Item key={category.title}>\r\n                                {category.title}\r\n                            </Navbar.Item>\r\n                        ))}\r\n                    </Navbar.Segment>\r\n\r\n                    <Navbar.Segment align=\"end\">\r\n                        <Navbar.Item>\r\n                        <Field kind=\"addons\">\r\n                            <Control>\r\n                                <Input placeholder=\"Search post\" />\r\n                            </Control>\r\n                            <Control>\r\n                                <Button color=\"primary\">\r\n                                    <Icon>\r\n                                        <FontAwesomeIcon icon={faSearch} />\r\n                                    </Icon>\r\n                                </Button>\r\n                            </Control>\r\n                        </Field>\r\n\r\n                        </Navbar.Item>\r\n                        <Navbar.Item>\r\n                            <Button as={Link} to=\"/newpost\" color=\"primary\" >New post</Button>\r\n                        </Navbar.Item>\r\n                    </Navbar.Segment>\r\n\r\n                </Navbar.Menu>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Column, Container } from \"rbx\";\r\nimport axios from 'axios';\r\n\r\nimport BlogPostPreview from \"./BlogPostCard\";\r\nimport NavBar from \"./NavBar\";\r\n\r\nconst featuredPosts = [\r\n    {\r\n      title: 'Post title #1',\r\n      date: '11 April 2019',\r\n      body:\r\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.',\r\n      image: 'https://source.unsplash.com/random',\r\n      imageText: 'Image Text',\r\n    },\r\n    {\r\n      title: 'Post title #2',\r\n      date: '12 May 2020',\r\n      body:\r\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.',\r\n      image: 'https://source.unsplash.com/random',\r\n      imageText: 'Image Text',\r\n    },\r\n    {\r\n      title: 'Post title #3',\r\n      date: '13 June 2021',\r\n      body:\r\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.',\r\n      image: 'https://source.unsplash.com/random',\r\n      imageText: 'Image Text',\r\n    },\r\n    {\r\n      title: 'Post title #4',\r\n      date: '14 July 2022',\r\n      body:\r\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.',\r\n      image: 'https://source.unsplash.com/random',\r\n      imageText: 'Image Text',\r\n    },\r\n    {\r\n      title: 'Post title #5',\r\n      date: '15 August 2023',\r\n      body:\r\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.',\r\n      image: 'https://source.unsplash.com/random',\r\n      imageText: 'Image Text',\r\n    },\r\n    {\r\n      title: 'Post title #6',\r\n      date: '15 September 2024',\r\n      body:\r\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.',\r\n      image: 'https://source.unsplash.com/random',\r\n      imageText: 'Image Text',\r\n    },\r\n\r\n];\r\n\r\nconst categories = [\r\n  { title: 'Category 1', url: '#' },\r\n  { title: 'Category 2', url: '#' },\r\n  { title: 'Category 3', url: '#' },\r\n];\r\n\r\nexport default function Main() {\r\n  const [posts, setPosts] = useState([])\r\n  const url = 'https://my-json-server.typicode.com/mkauha/JSON-server-demo/blogposts';\r\n\r\n  useEffect(() => {\r\n     axios\r\n      .get(url)\r\n      .then(response => {\r\n        setPosts(response.data);\r\n      }).catch(error => {\r\n        alert(`Backend error: ${error}`)\r\n    })\r\n  }, [])\r\n\r\n    return (\r\n        <div>\r\n        <NavBar />\r\n        <Container>\r\n            <Column.Group vcentered multiline>\r\n                {posts.map(post => (\r\n                    <Column size=\"one-third\">\r\n                        <BlogPostPreview key={post.title} post={post} />\r\n                    </Column>\r\n                ))}\r\n            </Column.Group>\r\n        </Container>\r\n\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Input, Field, Button, Box, Label, Control, Textarea  } from \"rbx\";\r\nimport NavBar from \"./NavBar\";\r\nimport axios from 'axios';\r\n\r\nconst boxStyle = {\r\n    margin: '60px',\r\n};\r\n\r\nconst buttonStyle = {\r\n    marginRight: '20px',\r\n};\r\n\r\nexport default function BlogPost(props) {\r\n\r\n    const url = 'https://my-json-server.typicode.com/mkauha/JSON-server-demo/blogposts';\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [date, setDate] = useState(new Date());\r\n    const dateMonthYear = `${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`\r\n\r\n\r\n    const handleChangeTitle = e => {\r\n        setTitle(e.target.value);\r\n    }\r\n    const handleChangeDescription = e => {\r\n        setDescription(e.target.value);\r\n    }\r\n\r\n   const handleSubmit = event => {\r\n        setDate(new Date());\r\n        event.preventDefault();\r\n        axios\r\n            .post(url, blogpost)\r\n            .then(response => {\r\n                console.log(response)\r\n            })\r\n            .catch(error => {\r\n                alert(`Error: Post '${blogpost.title}' was not posted`)\r\n            })\r\n            console.log('submit');\r\n    }\r\n\r\n    const blogpost = {\r\n        title: title,\r\n        description: description,\r\n        image: \"https://source.unsplash.com/random\",\r\n        date: dateMonthYear,\r\n        category: \"food\"\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NavBar />\r\n            <Box style={boxStyle}>\r\n                <Field>\r\n                    <Label>Title</Label>\r\n                    <Control>\r\n                        <Input \r\n                            placeholder=\"Your title\"\r\n                            value={title}\r\n                            onChange={handleChangeTitle}\r\n                        />\r\n                    </Control>\r\n\r\n                    <Label>Body</Label>\r\n                    <Control>\r\n                        <Textarea \r\n                            placeholder=\"Write here\"\r\n                            value={description}\r\n                            onChange={handleChangeDescription}\r\n                        />\r\n                    </Control>\r\n                    \r\n                    <Control>\r\n                        <Button style={buttonStyle} color=\"danger\">Cancel</Button>\r\n                        <Button onClick={handleSubmit} style={buttonStyle} color=\"success\" >Post</Button>\r\n                    </Control>\r\n                </Field>\r\n            </Box>\r\n        </div>\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"rbx/index.css\";\n\nimport Main from './components/Main';\nimport NewBlogPost from './components/NewBlogPost';\n\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n          <Switch>\n            <Route path=\"/\" exact={true} component={Main}/>\n            <Route path=\"/newpost\" component={NewBlogPost}/>\n          </Switch>\n      </div>\n    </Router>\n  );\n}"],"sourceRoot":""}