{"version":3,"sources":["components/FeaturedBlogPost.js","components/GridView.js","components/Main.js","components/NewBlogPost.js","components/Comment.js","components/BlogPost.js","components/Login.js","components/Dashboard.js","components/SearchBar.js","components/NavBar.js","components/SearchResults.js","App.js","serviceWorker.js","index.js"],"names":["readCheckIcon","marginTop","FeaturedBlogPost","props","post","useState","isPostRead","setIsPostRead","id","route","useEffect","readPosts","localStorage","getItem","JSON","parse","includes","setItem","stringify","Image","size","Container","src","imageUrl","Content","title","subtitle","description","as","Link","to","color","onClick","event","readPostsInStorage","push","style","icon","faCheckCircle","renderReadIcon","Footer","date","GridView","posts","setPosts","Group","vcentered","multiline","map","key","Main","axios","get","process","then","response","data","console","log","catch","error","alert","box","margin","buttonControls","NewBlogPost","postUrl","setId","setTitle","setDescription","body","setBody","setImageUrl","imageSrc","setImageSrc","selectedCategory","setSelectedCategory","categories","setCategories","Date","setDate","getDate","getMonth","getFullYear","dateMonthYear","setDateMonthYear","edited","setEdited","previewHidden","setPreviewHidden","undefined","location","state","postData","category","blogpost","url","breakpoint","placeholder","value","onChange","e","target","required","rows","shortDesc","substring","preventDefault","Option","kind","iconLeft","align","faImage","Label","Input","name","CTA","Icon","faUpload","Item","href","rel","alt","put","text","hidden","media","Comment","heartIconColor","setHeartIconColor","isCommentLiked","setCommentLiked","initialized","setInitialized","comment","commentUrl","postId","updateLikes","tempComment","author","content","likes","faUserCircle","faHeart","likedCommentsInStorage","handleHeartIconClick","imageContainer","image","button","BlogPost","match","params","setPost","commentsBoxOpen","setCommentBoxOpen","comments","setComments","commentAreaRef","setCommentAreaRef","fetchPost","fetchComments","filterData","commentArray","i","length","Number","formatDate","d","month","day","year","join","outlined","ref","textarea","tempDate","toString","tempContent","textField","Login","type","Dashboard","disabled","faSearch","fullwidth","Head","Row","Heading","Body","Cell","pathname","faEdit","delete","updatedPosts","splice","onDelete","faTrash","SearchBar","postFilter","setPostFilter","filteredPosts","setFilteredPosts","useLocation","filter","filtered","toLowerCase","indexOf","results","NavBar","navbarOpen","setNavbarOpen","fixed","active","Brand","Burger","Menu","Segment","SearchResults","App","path","exact","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.09f9a7a0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Card, Button, Title, Image, Icon } from \"rbx\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst readCheckIcon = {\r\n    marginTop:'7px'\r\n};\r\n\r\nexport default function FeaturedBlogPost(props) {\r\n\r\n    const { post } = props;\r\n    const [ isPostRead, setIsPostRead ] = useState(false);\r\n\r\n\r\n    let url = process.env.REACT_APP_POSTS_API_URL_PROD + `${post.id}`;\r\n\r\n    if(process.env.NODE_ENV !== 'production') {\r\n        url = process.env.REACT_APP_POSTS_API_URL_DEVEL + `${post.id}`;\r\n    }\r\n\r\n    const route = `/posts/${post.id}`\r\n\r\n    useEffect(() => {\r\n        // Get read posts from localstorage and compare to post id\r\n        var readPosts = [];\r\n\r\n        if(localStorage.getItem(\"readPosts\")) {\r\n            readPosts = JSON.parse(localStorage.getItem(\"readPosts\"));\r\n            \r\n            if(!readPosts.includes(post.id)) {\r\n                setIsPostRead(true);\r\n            }\r\n        } else {\r\n            localStorage.setItem('readPosts', JSON.stringify(readPosts));\r\n        }\r\n\r\n      }, []);\r\n\r\n    function onReadMore(event) {\r\n        // Mark post as read to local storage\r\n        var readPostsInStorage = [];\r\n        if(localStorage.getItem(\"readPosts\")) {\r\n            readPostsInStorage = JSON.parse(localStorage.getItem(\"readPosts\"));\r\n        };\r\n\r\n        if(!readPostsInStorage.includes(post.id)) {\r\n            readPostsInStorage.push(post.id)\r\n        };\r\n\r\n        localStorage.setItem('readPosts', JSON.stringify(readPostsInStorage));\r\n    }\r\n\r\n    function renderReadIcon() {\r\n        if(!isPostRead) {\r\n            return (\r\n                <Icon  style={readCheckIcon} >\r\n                    <FontAwesomeIcon icon={faCheckCircle} />\r\n                </Icon>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <Card.Image size='16by9'>\r\n                    <Image.Container size='16by9'>\r\n                        <Image src={post.imageUrl} />\r\n                    </Image.Container>\r\n                </Card.Image>\r\n\r\n                <Card.Content>\r\n                    <Title size={4}>{post.title}</Title>\r\n                    <Title subtitle>{post.description}</Title>\r\n                    <Button as={Link} to={route} color=\"primary\" onClick={onReadMore}>Read more</Button>\r\n                    {renderReadIcon()}\r\n                </Card.Content>\r\n                <Card.Footer>\r\n                    {post.date}\r\n                </Card.Footer>\r\n\r\n            </Card>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Column, Container } from \"rbx\";\r\n\r\nimport FeaturedBlogPost from \"./FeaturedBlogPost\";\r\n\r\nexport default function GridView(props) {\r\n\r\n  const [posts, setPosts] = useState(props.posts)\r\n  \r\n  useEffect(() => {\r\n    setPosts(props.posts);\r\n  }, [props.posts])\r\n\r\n    return (\r\n        <div>\r\n        <Container>\r\n            <Column.Group vcentered multiline>\r\n                {posts.map(post => (\r\n                    <Column key={post.id} size=\"one-third\">\r\n                        <FeaturedBlogPost key={post.id} post={post} />\r\n                    </Column>\r\n                ))}\r\n            </Column.Group>\r\n        </Container>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\nimport GridView from \"./GridView\";\r\n\r\nexport default function Main() {\r\n  const [posts, setPosts] = useState([])\r\n\r\n  let url = process.env.REACT_APP_POSTS_API_URL_PROD;\r\n\r\n  if(process.env.NODE_ENV !== 'production') {\r\n      url = process.env.REACT_APP_POSTS_API_URL_DEVEL;\r\n  }\r\n  \r\n  useEffect(() => {\r\n     axios\r\n      .get(url)\r\n      .then(response => {\r\n        setPosts(response.data);\r\n        console.log(response);\r\n      }).catch(error => {\r\n        alert(`${error}`)\r\n\r\n    })\r\n  }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <GridView posts={posts}></GridView>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Input, Field, Button, Box, Label, Control, Textarea, Select, Container, File, Icon, Divider, Media, Image, Title, Content } from \"rbx\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUpload, faImage } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst box = {\r\n    margin: '60px',\r\n};\r\n\r\nconst button = {\r\n    marginRight: '20px',\r\n};\r\n\r\nconst buttonControls = {\r\n    marginTop: '20px',\r\n};\r\n\r\n\r\nexport default function NewBlogPost(props) {\r\n\r\n    let postUrl = process.env.REACT_APP_POSTS_API_URL_PROD;\r\n    let categoryUrl = process.env.REACT_APP_CATEGORIES_API_URL_PROD;\r\n\r\n    if(process.env.NODE_ENV !== 'production') {\r\n        postUrl = process.env.REACT_APP_POSTS_API_URL_DEVEL;\r\n        categoryUrl = process.env.REACT_APP_CATEGORIES_API_URL_DEVEL;\r\n    }\r\n\r\n    const [id, setId] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [body, setBody] = useState('');\r\n    const [imageUrl, setImageUrl] = useState('https://bulma.io/images/placeholders/128x128.png');\r\n    const [imageSrc, setImageSrc] = useState('https://bulma.io/images/placeholders/128x128.png');\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n    const [categories, setCategories] = useState([])\r\n    const [date, setDate] = useState(new Date());\r\n    const [dateMonthYear, setDateMonthYear] = useState(`${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`)\r\n    const [edited, setEdited] = useState(false);\r\n\r\n    const [previewHidden, setPreviewHidden] = useState(true);\r\n\r\n    useEffect(() => {\r\n        axios\r\n         .get(categoryUrl)\r\n         .then(response => {\r\n            setCategories(response.data);\r\n         }).catch(error => {\r\n           alert(`Backend error: ${error}`)\r\n       })\r\n\r\n       if(props.location.state !== undefined) {\r\n            const postData = props.location.state.postData;\r\n            console.log(postData);\r\n            setId(postData.id);\r\n            setTitle(postData.title);\r\n            setDescription(postData.description);\r\n            setBody(postData.body);\r\n            setImageUrl(postData.imageUrl);\r\n            setSelectedCategory(postData.category);\r\n            setDateMonthYear(postData.date);\r\n            setEdited(true);\r\n        }\r\n     }, [])\r\n\r\n\r\n\r\n    const handleChangeTitle = e => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const handleChangeBody = e => {\r\n        let shortDesc = e.target.value.substring(0, 40) + '...';\r\n        setDescription(shortDesc);\r\n        setBody(e.target.value);\r\n    }\r\n\r\n    const handleChangeCategory = e => {\r\n        e.preventDefault();\r\n        setSelectedCategory(e.target.value);\r\n    }\r\n\r\n    const handleChangeImageUrl = e => {\r\n        e.preventDefault();\r\n        setImageSrc(e.target.value);\r\n    }\r\n    \r\n    const handleAddImageUrl = e => {\r\n        e.preventDefault();\r\n        setImageUrl(imageSrc);\r\n    }\r\n\r\n   const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if(!edited) {\r\n            setDate(new Date());\r\n            axios\r\n            .post(postUrl, blogpost)\r\n            .then(response => {\r\n                console.log(response);\r\n                alert(`Post ${blogpost.title} created`);\r\n            })\r\n            .catch(error => {\r\n                 console.log(error);\r\n                alert(`Error: Post '${blogpost.title}' was not posted`)\r\n            })\r\n       } else {\r\n            postUrl = postUrl + `${id}`\r\n            axios\r\n            .put(postUrl, blogpost)\r\n            .then(response => {\r\n                console.log(response);\r\n                alert(`Post ${blogpost.title} updated`);\r\n            })\r\n            .catch(error => {\r\n                 console.log(error);\r\n                alert(`Error: Post '${blogpost.title}' was not updated`)\r\n            })\r\n       }\r\n\r\n\r\n       console.log('submit');\r\n    }\r\n\r\n    const handlePreview = e => {\r\n        e.preventDefault();\r\n        setPreviewHidden(!previewHidden);\r\n    }\r\n\r\n    const renderImage = () => {\r\n        return (\r\n            <a href={imageUrl} target=\"_blank\" rel='noreferrer noopener'>\r\n            <Image\r\n                alt=\"Image preview\"\r\n                src={imageUrl}>\r\n            </Image>\r\n            </a>\r\n        );\r\n    }\r\n\r\n    const blogpost = {\r\n        title: title,\r\n        description: description,\r\n        body: body,\r\n        imageUrl: imageUrl,\r\n        date: dateMonthYear,\r\n        category: selectedCategory,\r\n        url: postUrl\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Container breakpoint=\"touch\">\r\n            <Box style={box} >\r\n                <form>\r\n                    <Field>\r\n                        <Label>Title</Label>\r\n                        <Control>\r\n                            <Input \r\n                                placeholder=\"Post title\"\r\n                                value={title}\r\n                                onChange={handleChangeTitle}\r\n                                required\r\n                            />\r\n                        </Control>\r\n                    </Field>\r\n\r\n                    <Field>\r\n                        <Label>Body</Label>\r\n                        <Control>\r\n                            <Textarea \r\n                                rows={15}\r\n                                placeholder=\"Write here\"\r\n                                value={body}\r\n                                onChange={handleChangeBody}\r\n                                required\r\n                            />\r\n                        </Control>\r\n                    </Field>\r\n\r\n                    <Field>\r\n                        <Label>Category</Label>\r\n                        <Control>\r\n                            <Select.Container>\r\n                                <Select onChange={handleChangeCategory}>\r\n                                <Select.Option>None</Select.Option>\r\n                                    {categories.map(category => (\r\n                                        <Select.Option key={category.title} value={category.title}>{category.title}</Select.Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Select.Container>\r\n                        </Control>\r\n                    </Field>\r\n\r\n                    <Label>Image</Label>\r\n                    <Field kind=\"addons\">\r\n                        <Control iconLeft>\r\n                            <Input \r\n                                placeholder=\"Image URL\"\r\n                                onChange={handleChangeImageUrl}\r\n                            />\r\n                            <Icon size=\"small\" align=\"left\">\r\n                                <FontAwesomeIcon icon={faImage} />\r\n                            </Icon>\r\n                        </Control>\r\n                        <Control>\r\n                            <Button onClick={handleAddImageUrl} color=\"link\" >Add</Button>\r\n                        </Control>\r\n                    </Field>\r\n                    <Field>\r\n                        <File>\r\n                            <File.Label>\r\n                                <File.Input name=\"image\" />\r\n                                <File.CTA>\r\n                                <File.Icon>\r\n                                    <FontAwesomeIcon icon={faUpload} />\r\n                                </File.Icon>\r\n                                <File.Label as=\"span\">Choose an Image</File.Label>\r\n                                </File.CTA>\r\n                            </File.Label>\r\n                        </File>\r\n                    </Field>\r\n\r\n                    <Media>\r\n                    <Media.Item as=\"figure\" align=\"left\">\r\n                        <Image.Container as=\"p\" size={128}>\r\n                            {renderImage()}\r\n                        </Image.Container>\r\n                    </Media.Item>\r\n                    </Media>\r\n\r\n                    <Divider></Divider>\r\n                    \r\n                    <Field kind=\"group\">\r\n                        <Control style={buttonControls}>\r\n                            <Button.Group>\r\n                                <Button onClick={handleSubmit} color=\"link\" >Publish</Button>\r\n                                <Button onClick={handlePreview} >Preview</Button>\r\n                                <Button text as={Link} to=\"/\" >Cancel</Button>\r\n                            </Button.Group>\r\n                        </Control>\r\n                    </Field>\r\n                </form>\r\n            </Box>\r\n            </Container>\r\n\r\n            <div hidden={previewHidden}>\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Content, Media, Level, Icon } from \"rbx\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart, faUserCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport axios from 'axios';\r\n\r\nconst media = {\r\n  'margin': '20px',\r\n};\r\n\r\nexport default function Comment(props) {\r\n  let [heartIconColor, setHeartIconColor] = useState('default')\r\n  const [isCommentLiked, setCommentLiked] = useState(false)\r\n  const [initialized, setInitialized] = useState(false)\r\n\r\n  const { comment } = props;\r\n\r\n  let commentUrl = `${process.env.REACT_APP_COMMENTS_API_URL_PROD}${comment.id}` ;\r\n  \r\n  if(process.env.NODE_ENV !== 'production') {\r\n    commentUrl = process.env.REACT_APP_COMMENTS_API_URL_DEVEL + `${comment.id}`;\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Get liked comments from localstorage and compare to post id\r\n    let likedComments = [];\r\n    if(localStorage.getItem(`likedComments${comment.postId}`)) {\r\n      likedComments = JSON.parse(localStorage.getItem(`likedComments${comment.postId}`));\r\n        \r\n        if(likedComments.includes(comment.id) && !initialized) {\r\n            setCommentLiked(true);\r\n            setHeartIconColor('red')\r\n            setInitialized(true)\r\n        };\r\n    };\r\n  }, [isCommentLiked]);\r\n\r\n  const handleHeartIconClick = e => {\r\n    // Mark comments as liked to local storage\r\n    let likedCommentsInStorage = [];\r\n    if(localStorage.getItem(`likedComments${comment.postId}`)) {\r\n      likedCommentsInStorage = JSON.parse(localStorage.getItem(`likedComments${comment.postId}`));\r\n    }\r\n\r\n    if(!likedCommentsInStorage.includes(comment.id)) {\r\n      likedCommentsInStorage.push(comment.id)\r\n    }\r\n    localStorage.setItem(`likedComments${comment.postId}`, JSON.stringify(likedCommentsInStorage));\r\n\r\n    if (!isCommentLiked) {\r\n      setHeartIconColor('red')\r\n      updateLikes(++comment.likes);\r\n      setCommentLiked(true)\r\n    } else {\r\n      updateLikes(--comment.likes)\r\n      setHeartIconColor('default')\r\n      setCommentLiked(false)\r\n      localStorage.setItem(`likedComments${comment.postId}`, '')\r\n    }\r\n  }\r\n\r\n  const updateLikes = (e) => {\r\n    const tempComment = {author: comment.author, content: comment.content, date: comment.date, likes: comment.likes, postId: comment.postId}\r\n    axios\r\n     .put(commentUrl, tempComment)\r\n     .then(response => {\r\n       console.log(response)\r\n     }).catch(error => {\r\n       alert(`${error}`)\r\n   })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    <Media style={media}>\r\n        <Media.Item as=\"figure\" align=\"left\">\r\n            <FontAwesomeIcon size={'3x'} icon={faUserCircle} />\r\n        </Media.Item>\r\n        <Media.Item align=\"content\">\r\n            <Content>\r\n                <p>\r\n                <strong>{comment.author}</strong> <small>@{comment.author}</small>{' '}\r\n                <small>{comment.date}</small>\r\n                <br />\r\n                {comment.content}\r\n                </p>\r\n            </Content>\r\n                <Level breakpoint=\"mobile\">\r\n                    <Level.Item align=\"left\">\r\n                        <Level.Item>\r\n                            <small>\r\n                                <a href=\"#reply\">Reply</a>\r\n                            </small>\r\n                        </Level.Item>\r\n                        <Level.Item as=\"a\">\r\n                            <Icon size=\"small\">\r\n                                <FontAwesomeIcon color={heartIconColor} icon={faHeart} onClick={() => handleHeartIconClick()} />\r\n                            </Icon>\r\n                        </Level.Item>\r\n                        <Content>\r\n                            <small>{comment.likes}</small>\r\n                        </Content>\r\n                    </Level.Item>\r\n            </Level>\r\n        </Media.Item>\r\n    </Media>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Content, Title, Box, Image, Media, Button, Field, Control, Textarea } from \"rbx\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport Comment from './Comment';\r\nimport axios from 'axios';\r\n\r\nconst box = {\r\n  'margin': 'auto',\r\n  'marginTop': '60px',\r\n  'marginBottom': '100px',\r\n  'maxWidth': '50%'\r\n};\r\n\r\nconst imageContainer = {\r\n  'marginTop': '20px',\r\n  'marginBottom': '20px',\r\n};\r\n\r\nconst image = {\r\n  'borderRadius': '5px',\r\n};\r\n\r\nconst body = {\r\n  'padding': '50px',\r\n};\r\n\r\nconst button = {\r\n  'width': '50%',\r\n  'marginLeft': '25%',\r\n  'marginRight': '25%',\r\n};\r\n\r\nconst media = {\r\n  'margin': '20px',\r\n};\r\n\r\nconst title = {\r\n\r\n};\r\n\r\n\r\nexport default function BlogPost(props) {\r\n  const id  = props.match.params.id;\r\n  const [post, setPost] = useState([])\r\n  const [commentsBoxOpen, setCommentBoxOpen] = useState(true);\r\n  const [comments, setComments] = useState([])\r\n  const [commentAreaRef, setCommentAreaRef] = useState('')\r\n\r\n  let url = process.env.REACT_APP_POSTS_API_URL_PROD + `${id}`;\r\n\r\n  let commentUrl = process.env.REACT_APP_COMMENTS_API_URL_DEVEL;\r\n\r\n  if(process.env.NODE_ENV !== 'production') {\r\n      url = process.env.REACT_APP_POSTS_API_URL_DEVEL + `${id}`;\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchPost();\r\n    fetchComments();\r\n  }, [])\r\n\r\n  const fetchPost = () => {\r\n    axios\r\n     .get(url)\r\n     .then(response => {\r\n       setPost(response.data);\r\n       console.log(response);\r\n     }).catch(error => {\r\n       alert(`${error}`)\r\n   })\r\n  }\r\n\r\n  const fetchComments = () => {\r\n    axios\r\n     .get(commentUrl)\r\n     .then(response => {\r\n       filterData(response.data);\r\n       console.log(response);\r\n     }).catch(error => {\r\n       alert(`${error}`)\r\n   })\r\n  }\r\n\r\n  const filterData = (data) => {\r\n    const commentArray = [];\r\n    for(let i = 0; i < data.length; i++) {\r\n      if(Number(data[i].postId) === Number(id)) {\r\n        commentArray.push(data[i]);\r\n      }\r\n    }\r\n    setComments(commentArray);\r\n  }\r\n\r\n  const handleCommentPost = (e) => {\r\n    const tempDate = formatDate(new Date().toString())\r\n    const tempContent = commentAreaRef.value\r\n    if (commentAreaRef.value.length > 0) {\r\n      const tempComment = {author: 'Guest515', content: tempContent, date: tempDate, likes: 0, postId: id}\r\n      axios\r\n      .post(commentUrl, tempComment)\r\n      .then(response => {\r\n        console.log(response)\r\n        commentAreaRef.value = ''\r\n      }).then(() =>\r\n          fetchComments()\r\n      ).catch(error => {\r\n        alert(`${error}`)\r\n      })\r\n    } else {\r\n      alert('Comment length must be at least 1')\r\n    }\r\n  }\r\n\r\n  const formatDate = (date) => {\r\n    var d = new Date(date),\r\n        month = '' + (d.getMonth() + 1),\r\n        day = '' + d.getDate(),\r\n        year = d.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n\r\n    return [year, month, day].join('.');\r\n}\r\n\r\n  return (\r\n    <div>\r\n    <Box breakpoint=\"tablet\" style={box}>\r\n        \r\n        <Content style={body}>\r\n          <Title style={title}>{post.title}</Title>\r\n          <Title style={title} size={6}>{post.category}</Title>\r\n            <p>\r\n              {post.date}\r\n            </p>\r\n        </Content>\r\n\r\n          <Image.Container size={'16by9'} style={imageContainer}>\r\n            <Image src={post.imageUrl} style={image}/>\r\n          </Image.Container>\r\n\r\n          <Content>\r\n            <p>\r\n              {post.body}\r\n            </p>\r\n          </Content>\r\n\r\n          <Control>\r\n            <Button style={button} outlined color={'#333'} key={'#333'} onClick={() => setCommentBoxOpen(!commentsBoxOpen)} >\r\n              View Comments ({comments.length})\r\n            </Button>\r\n          </Control>\r\n\r\n          <Content hidden={commentsBoxOpen} key={comments.id}>\r\n              {comments.map(comment => (\r\n                <Comment key={comment.id} comment={comment} postId={post.id}/>\r\n              ))}\r\n          </Content>\r\n\r\n          <Content hidden={commentsBoxOpen}>\r\n            <Media style={media} as=\"article\">\r\n              <Media.Item align=\"left\">\r\n                <FontAwesomeIcon size={'3x'} icon={faUserCircle} />\r\n              </Media.Item>\r\n              <Media.Item align=\"content\">\r\n                <Field>\r\n                  <Control as=\"p\">\r\n                    <Textarea ref={(textarea) => {setCommentAreaRef(textarea)}} placeholder=\"Add a comment...\" />\r\n                  </Control>\r\n                </Field>\r\n                <Field>\r\n                  <Control as=\"p\">\r\n                    <Button onClick={handleCommentPost}>Post comment</Button>\r\n                  </Control>\r\n                </Field>\r\n              </Media.Item>\r\n            </Media>\r\n          </Content>\r\n\r\n    </Box>\r\n    </div>\r\n  );\r\n}","import React, { useState } from \"react\";\r\nimport { Field, Input, Box, Control, Button, Title, Label } from \"rbx\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\n\r\nconst box = {\r\n  'margin': 'auto',\r\n  'padding': '50px',\r\n  'marginTop': '150px',\r\n  'maxWidth': '40%'\r\n};\r\n\r\nconst textField = {\r\n\r\n};\r\n\r\n\r\nexport default function Login(props) {\r\n  const [post, setPost] = useState([])\r\n\r\n  let url = process.env.REACT_APP_POSTS_API_URL_PROD;\r\n\r\n  if(process.env.NODE_ENV !== 'production') {\r\n      url = process.env.REACT_APP_POSTS_API_URL_DEVEL;\r\n  }\r\n\r\n/*\r\n   useEffect(() => {\r\n    axios\r\n     .get(url)\r\n     .then(response => {\r\n       setPost(response.data);\r\n       console.log(response);\r\n     }).catch(error => {\r\n       alert(`${error}`)\r\n   })\r\n }, []) \r\n */\r\n\r\n  return (\r\n    <div>\r\n      <Box style={box}>\r\n      <Title>Login</Title>\r\n        <Field style={textField}>\r\n          <Label>Username</Label>\r\n          <Control>\r\n            <Input type=\"text\" placeholder=\"Username\" />\r\n          </Control>\r\n        </Field>\r\n\r\n        <Field style={textField}>\r\n          <Label>Password</Label>\r\n          <Control>\r\n            <Input type=\"password\" placeholder=\"Password\" />\r\n          </Control>\r\n        </Field>\r\n\r\n        <Field>\r\n          <Control>\r\n            <Button as={Link} to=\"/user/dashboard\" color=\"success\">Login</Button>\r\n          </Control>\r\n        </Field>\r\n      </Box>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Table, Input, Box, Control, Button, Title, Icon, Field, Label } from \"rbx\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrash, faSearch, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst box = {\r\n  'margin': 'auto',\r\n  'padding': '50px',\r\n  'marginTop': '50px',\r\n  'maxWidth': '80%'\r\n};\r\n\r\n\r\n\r\nexport default function Dashboard(props) {\r\n  const [posts, setPosts] = useState([])\r\n\r\n  let shortDescription = '';\r\n\r\n  let url = process.env.REACT_APP_POSTS_API_URL_PROD;\r\n\r\n  if(process.env.NODE_ENV !== 'production') {\r\n      url = process.env.REACT_APP_POSTS_API_URL_DEVEL;\r\n  }\r\n  \r\n\r\n\r\n   useEffect(() => {\r\n    axios\r\n     .get(url)\r\n     .then(response => {\r\n       setPosts(response.data);\r\n     }).catch(error => {\r\n       alert(`${error}`)\r\n   })\r\n }, []) \r\n \r\n function onDelete(id, event) {\r\n  console.log(`delete ${id}`);\r\n  axios\r\n      .delete(url + id)\r\n      .then(response => {\r\n          console.log(response)\r\n      })\r\n      .catch(error => {\r\n          alert(`Error: Post  was not deleted`)\r\n      })\r\n\r\n      let updatedPosts = [];\r\n      for(let i = 0; i < posts.length; i++) {\r\n        if (posts[i].id === id) {\r\n            console.log(posts[i].id)\r\n            posts.splice(i, 1)\r\n            updatedPosts = posts.splice(0)\r\n            break;\r\n        }\r\n      }\r\n      setPosts(updatedPosts);\r\n}\r\n\r\nfunction shorten(description) {\r\n  return shortDescription = description.substring(0, 40) + '...'\r\n}\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Box style={box}>\r\n        <Title>Dashboard</Title>\r\n        <Button as={Link} to=\"/user/new\" color=\"primary\" >New post</Button>\r\n\r\n        <Label>All posts</Label>\r\n        <Field kind=\"addons\">\r\n          <Control>\r\n              <Input disabled placeholder=\"Search\" />\r\n          </Control>\r\n          <Control>\r\n              <Button disabled color=\"info\">\r\n                  <Icon>\r\n                      <FontAwesomeIcon icon={faSearch} />\r\n                  </Icon>\r\n              </Button>\r\n          </Control>\r\n        </Field>\r\n\r\n        <Table fullwidth>\r\n          <Table.Head>\r\n            <Table.Row>\r\n              <Table.Heading>ID</Table.Heading>\r\n              <Table.Heading>Title</Table.Heading>\r\n              <Table.Heading>Description</Table.Heading>\r\n              <Table.Heading>Date</Table.Heading>\r\n              <Table.Heading>Edit</Table.Heading>\r\n              <Table.Heading>Remove</Table.Heading>\r\n            </Table.Row>\r\n          </Table.Head>\r\n\r\n          <Table.Body>\r\n          {posts.map(post => (\r\n            <Table.Row key={post.id}>\r\n              <Table.Cell>{post.id}</Table.Cell>\r\n              <Table.Cell>{post.title}</Table.Cell>\r\n              <Table.Cell>{shorten(post.description)}</Table.Cell>\r\n              <Table.Cell>{post.date}</Table.Cell>\r\n              <Table.Cell>\r\n                <Button color=\"info\"\r\n                    as={Link} to={{\r\n                      pathname: '/user/new',\r\n                      state: { postData: post }\r\n                    }}>\r\n                  <Icon>\r\n                      <FontAwesomeIcon icon={faEdit} />\r\n                  </Icon>\r\n                </Button>\r\n              </Table.Cell>\r\n              <Table.Cell>\r\n                <Button color=\"danger\" onClick={(e) => onDelete(post.id, e)}>\r\n                  <Icon>\r\n                      <FontAwesomeIcon icon={faTrash} />\r\n                  </Icon>\r\n                </Button>\r\n              </Table.Cell>\r\n            </Table.Row>\r\n            ))}\r\n          </Table.Body>\r\n        </Table>\r\n      </Box>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect  } from \"react\";\r\nimport { Button, Control, Input, Field, Icon} from \"rbx\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nexport default function SearchBar() {\r\n    const [categories, setCategories] = useState([]);\r\n    const [postFilter, setPostFilter] = useState('');\r\n    const [posts, setPosts] = useState([]);\r\n    const [filteredPosts, setFilteredPosts] = useState([]);\r\n    const location = useLocation();\r\n\r\n\r\n    let postUrl = process.env.REACT_APP_POSTS_API_URL_PROD;\r\n    let categoryUrl = process.env.REACT_APP_CATEGORIES_API_URL_PROD;\r\n\r\n    if(process.env.NODE_ENV !== 'production') {\r\n        postUrl = process.env.REACT_APP_POSTS_API_URL_DEVEL;\r\n        categoryUrl = process.env.REACT_APP_CATEGORIES_API_URL_DEVEL;\r\n    }\r\n\r\n    useEffect(() => {\r\n        axios\r\n         .get(categoryUrl)\r\n         .then(response => {\r\n            setCategories(response.data);\r\n         }).catch(error => {\r\n           alert(`Backend error: ${error}`)\r\n        })\r\n\r\n        axios\r\n        .get(postUrl)\r\n        .then(response => {\r\n           setPosts(response.data);\r\n        }).catch(error => {\r\n          alert(`Backend error: ${error}`)\r\n       })\r\n\r\n     }, [])\r\n\r\n    const handleChangeSearchQuery = e => {\r\n      setPostFilter(e.target.value);\r\n      filter();\r\n    }\r\n\r\n    const handleClickSearch = e => {\r\n      if(location.pathname === '/search') {\r\n        console.log(true)\r\n      }\r\n    }\r\n\r\n    const filter = () => {\r\n      let filtered = []\r\n      filtered = posts.filter( (post) => {\r\n        return post.title.toLowerCase().indexOf(postFilter.toLowerCase())!==-1\r\n      })\r\n\r\n      setFilteredPosts(filtered);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Field kind=\"addons\">\r\n                <Control>\r\n                    <Input \r\n                        type=\"text\" \r\n                        value={postFilter} \r\n                        onChange={handleChangeSearchQuery} \r\n                        placeholder=\"Search posts\" />\r\n                </Control>\r\n                <Control>\r\n                    <Button color=\"primary\" \r\n                      onClick={handleClickSearch} \r\n                      as={Link} to={{\r\n                      pathname: '/search',\r\n                      state: { results: filteredPosts }\r\n                    }}>\r\n                        <Icon>\r\n                            <FontAwesomeIcon icon={faSearch} />\r\n                        </Icon>\r\n                    </Button>\r\n                </Control>\r\n            </Field>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Navbar, Icon, Image} from \"rbx\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faUserCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport Search from './SearchBar'\r\n\r\nexport default function NavBar() {\r\n    const [navbarOpen, setNavbarOpen] = useState(false);\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    let postUrl = process.env.REACT_APP_POSTS_API_URL_PROD;\r\n    let categoryUrl = process.env.REACT_APP_CATEGORIES_API_URL_PROD;\r\n\r\n    if(process.env.NODE_ENV !== 'production') {\r\n        postUrl = process.env.REACT_APP_POSTS_API_URL_DEVEL;\r\n        categoryUrl = process.env.REACT_APP_CATEGORIES_API_URL_DEVEL;\r\n    }\r\n\r\n    useEffect(() => {\r\n        axios\r\n         .get(categoryUrl)\r\n         .then(response => {\r\n            setCategories(response.data);\r\n         }).catch(error => {\r\n           alert(`Backend error: ${error}`)\r\n        })\r\n\r\n     }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Navbar fixed='top' active={navbarOpen} >\r\n                <Navbar.Brand>\r\n                    <Navbar.Item as={Link} to=\"/\">\r\n                        <Image src=\"logo.png\" />\r\n                    </Navbar.Item>\r\n                <Navbar.Burger onClick={() => setNavbarOpen(!navbarOpen)}/>\r\n                </Navbar.Brand>\r\n                \r\n                <Navbar.Menu>\r\n                    <Navbar.Segment align=\"start\">\r\n                         {categories.map(category => (\r\n                            <Navbar.Item key={category.id}>\r\n                                {category.title}\r\n                            </Navbar.Item>\r\n                        ))}\r\n                    </Navbar.Segment>\r\n\r\n                    <Navbar.Segment align=\"end\">\r\n                        <Navbar.Item as='div'>\r\n                            <Search></Search>\r\n                        </Navbar.Item>\r\n\r\n                        <Navbar.Item as='div'>\r\n                            <Icon as={Link} to=\"/user/login\">\r\n                                <FontAwesomeIcon icon={faUserCircle} />\r\n                            </Icon>\r\n                        </Navbar.Item>\r\n                    </Navbar.Segment>\r\n\r\n                </Navbar.Menu>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Title, Container, Button } from \"rbx\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport GridView from \"./GridView\";\r\n\r\nexport default function SearchResults(props) {\r\n    const [posts, setPosts] = useState([])\r\n    \r\n    const button = {\r\n        marginTop: '20px',\r\n    };\r\n\r\n    useEffect(() => {\r\n       if(props.location.state !== undefined) {\r\n            const postData = props.location.state.results;\r\n            setPosts(postData);\r\n        }\r\n     }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Title>Results: {posts.length} </Title>\r\n                <GridView posts={posts}></GridView>\r\n                <Button style={button} as={Link} to=\"/\" >Back</Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"rbx/index.css\";\r\n\r\nimport Main from './components/Main';\r\nimport NewBlogPost from './components/NewBlogPost';\r\nimport BlogPost from './components/BlogPost';\r\nimport Login from './components/Login';\r\nimport Dashboard from './components/Dashboard';\r\nimport NavBar from \"./components/NavBar\";\r\nimport SearchResults from './components/SearchResults';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <NavBar />\r\n      <div>\r\n          <Switch>\r\n            <Route path=\"/\" exact={true} component={Main}/>\r\n            <Route path=\"/search\" component={SearchResults}/>\r\n            <Route path=\"/posts/:id\" component={BlogPost}/>\r\n            <Route path=\"/user/new\" component={NewBlogPost}/>\r\n            <Route path=\"/user/login\" component={Login}/>\r\n            <Route path=\"/user/dashboard\" component={Dashboard}/>\r\n          </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}