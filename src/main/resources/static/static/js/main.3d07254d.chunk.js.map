{"version":3,"sources":["context/auth.js","PrivateRoute.js","components/FeaturedBlogPost.js","components/GridView.js","components/Main.js","components/NewBlogPost.js","components/Comment.js","components/BlogPost.js","components/Login.js","components/Dashboard.js","components/SearchBar.js","components/NavBar.js","components/SearchResults.js","components/CommentTable.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","useAuth","useContext","PrivateRoute","Component","component","rest","authTokens","render","props","to","subtitle","iconHeart","marginTop","marginLeft","iconHeartText","marginRight","FeaturedBlogPost","post","useState","isPostRead","setIsPostRead","localStorage","getItem","setItem","JSON","stringify","parse","readPosts","setReadPosts","history","useHistory","id","route","onReadMore","event","window","scrollTo","readPostsInStorage","includes","push","useEffect","Image","size","Container","src","imageUrl","Content","Item","align","date","onClick","e","pathname","state","query","target","lastChild","data","category","as","Link","title","style","responsive","touch","hide","value","description","color","icon","faHeart","postLikes","GridView","posts","setPosts","Group","multiline","map","key","hero","backtToTopButton","Main","axios","get","process","then","response","catch","error","alert","reverse","Body","faChevronUp","box","margin","buttonControls","NewBlogPost","postUrl","setId","setTitle","setDescription","body","setBody","setImageUrl","imageSrc","setImageSrc","selectedCategory","setSelectedCategory","categories","setCategories","Date","setDate","getDate","getMonth","getFullYear","dateMonthYear","setDateMonthYear","edited","setEdited","useForm","register","handleSubmit","errors","useModali","animated","message","buttons","Button","label","isStyleCancel","togglePublishModal","isStyleDefault","handlePostPublish","publishModal","toggleCancelModal","isStyleDestructive","handleCancel","cancelModal","onHide","goToHome","goToDashBoard","postSuccessModal","togglePostSuccessModal","undefined","location","postData","put","blogpost","console","log","url","breakpoint","onSubmit","name","placeholder","onChange","ref","required","minLength","maxLength","Title","type","rows","shortDesc","substring","preventDefault","Option","kind","iconLeft","faImage","href","rel","alt","text","Modal","media","Comment","heartIconColor","setHeartIconColor","isCommentLiked","setCommentLiked","initialized","setInitialized","comment","commentUrl","postId","updateLikes","tempComment","author","content","likes","faUserCircle","likedCommentsInStorage","handleHeartIconClick","container","imageContainer","image","button","likeButton","paddingLeft","BlogPost","match","params","setPost","recommendedPosts","setRecommendedPosts","commentsBoxOpen","setCommentBoxOpen","comments","setComments","commentAreaRef","setCommentAreaRef","likedPosts","setLikedPosts","fetchPost","fetchComments","fetchRecommendations","Number","tempPost","filterData","randomizePosts","allPosts","randomPosts","arr","length","r","Math","floor","random","indexOf","i","commentArray","formatDate","d","month","day","year","join","outlined","likedPostsInStorage","idAsNumber","index","splice","hidden","textarea","tempDate","toString","tempContent","loginbutton","Login","isLoggedIn","setLoggedIn","password","setPassword","username","setUsername","loginError","setLoginError","setAuthTokens","postLogin","tempData","status","headers","authorization","startsWith","handleKeyPressLogin","onKeyDown","Username","Password","newpostbutton","Dashboard","postToDelete","setPostToDelete","postToEdit","setPostToEdit","toggleNewpostModal","newpostModal","toggleDeleteModal","delete","updatedPosts","onDelete","deleteModal","toggleEditModal","editModal","toggleLogoutModal","logoutModal","faSignOutAlt","faPen","fullwidth","Head","Row","Heading","Cell","faComments","faEdit","faTrash","SearchBar","postFilter","setPostFilter","handleClickSearch","faSearch","NavBar","navbarOpen","setNavbarOpen","handleClickCategory","firstChild","fixed","active","Brand","Burger","Menu","Segment","SearchResults","filteredPosts","setFilteredPosts","queryData","filter","toLowerCase","goBack","CommentTable","commentToDelete","setCommentToDelete","updatedComments","shorten","NotFound","textAlign","App","existingTokens","Provider","path","exact","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d07254d.chunk.js","sourcesContent":["import { createContext, useContext } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useAuth } from \"./context/auth\";\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n\r\n  const { authTokens } = useAuth();\r\n\r\n  return (\r\n    <Route \r\n      {...rest} \r\n      render={(props) => \r\n        authTokens ? (\r\n        <Component {...props} />\r\n      ) : ( <Redirect to=\"/login\" /> )\r\n    }\r\n    />\r\n  );\r\n}\r\n\r\nexport default PrivateRoute;","import React, { useState, useEffect } from \"react\";\r\nimport { Card, Button, Title, Image, Icon, Level } from \"rbx\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst subtitle = {\r\n    'marginTop': '10px'\r\n};\r\n\r\nconst iconHeart = {\r\n    marginTop: '5px',\r\n    marginLeft: '20px',\r\n};\r\n\r\nconst iconHeartText = {\r\n    marginRight: '3px',\r\n};\r\n\r\nconst getReadPostsFromLocalStorage = () => {\r\n    let readPostsInStorage = localStorage.getItem(\"readPosts\");\r\n    if(!readPostsInStorage) {\r\n        localStorage.setItem('readPosts', JSON.stringify([]));\r\n    } \r\n\r\n    return JSON.parse(localStorage.getItem(\"readPosts\"));\r\n}\r\n\r\nexport default function FeaturedBlogPost(props) {\r\n\r\n    const { post } = props;\r\n    const [ isPostRead, setIsPostRead ] = useState(false);\r\n    const [ readPosts, setReadPosts ] = useState(getReadPostsFromLocalStorage())\r\n\r\n    let history = useHistory();\r\n\r\n    let url = process.env.REACT_APP_POSTS_API_URL_PROD + `${post.id}`;\r\n\r\n    if(process.env.NODE_ENV !== 'production') {\r\n        url = process.env.REACT_APP_POSTS_API_URL_DEVEL + `${post.id}`;\r\n    }\r\n\r\n    const route = `/posts/${post.id}`\r\n\r\n    useEffect(() => {\r\n        if(readPosts.includes(post.id) && isPostRead !== true) {\r\n            setIsPostRead(true);\r\n        }\r\n      }, []);\r\n\r\n    function onReadMore(event) {\r\n        window.scrollTo(0, 0);\r\n        // Mark post as read to local storage\r\n        let readPostsInStorage = JSON.parse(localStorage.getItem(\"readPosts\"));\r\n\r\n        if(!readPostsInStorage.includes(post.id)) {\r\n            readPostsInStorage.push(post.id)\r\n        };\r\n\r\n        localStorage.setItem('readPosts', JSON.stringify(readPostsInStorage));\r\n        setReadPosts(JSON.stringify(readPostsInStorage));\r\n        \r\n    }\r\n\r\n    function renderReadIcon() {\r\n        if(isPostRead) {\r\n            return (\r\n                <span>\r\n                <Button as={Link} to={route} color=\"light\" onClick={onReadMore}>Read more</Button>\r\n                </span>\r\n            );\r\n        } else {\r\n            return (\r\n                <span>\r\n                <Button as={Link} to={route} color=\"primary\" onClick={onReadMore}>Read more</Button>\r\n                </span>\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    const handleClickCategory = e => {\r\n        history.push({\r\n                    pathname: '/search',\r\n                    state: { query: e.target.lastChild.data }\r\n                    })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <Card.Image size='16by9'>\r\n                    <Image.Container size='16by9'>\r\n                        <Image src={post.imageUrl} />\r\n                    </Image.Container>\r\n                </Card.Image>\r\n\r\n                <Card.Content>\r\n                <Level>\r\n                        <Level.Item align=\"left\">{post.date}</Level.Item>\r\n                        <Level.Item align=\"right\" onClick={handleClickCategory}><a>{post.category}</a></Level.Item>\r\n                </Level>\r\n                    <span><Title as={Link} to={route} size={4} onClick={onReadMore}>{post.title}</Title></span>\r\n                    <span><Title \r\n                        subtitle \r\n                        style={subtitle}\r\n                        responsive={{\r\n                            touch: { hide: { value: true } }\r\n                          }}\r\n                        >{post.description}</Title></span>\r\n                </Card.Content>\r\n                <Card.Content>\r\n                    {renderReadIcon()}\r\n                    <Icon style={iconHeart} color=\"grey\">\r\n                        <FontAwesomeIcon style={iconHeartText} size=\"lg\" icon={faHeart} />\r\n                        <small>{post.postLikes}</small>\r\n                    </Icon>\r\n                </Card.Content>\r\n            </Card>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Column, Container } from \"rbx\";\r\n\r\nimport FeaturedBlogPost from \"./FeaturedBlogPost\";\r\n\r\nexport default function GridView(props) {\r\n\r\n  const [posts, setPosts] = useState(props.posts)\r\n  \r\n  useEffect(() => {\r\n    setPosts(props.posts);\r\n  }, [props.posts])\r\n\r\n    return (\r\n        <div>\r\n        <Container>\r\n            <Column.Group multiline>\r\n                {posts.map(post => (\r\n                    <Column key={post.id} size=\"one-third\">\r\n                        <FeaturedBlogPost key={post.id} post={post} />\r\n                    </Column>\r\n                ))}\r\n            </Column.Group>\r\n        </Container>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { Hero, Title, Container, Button, Icon } from \"rbx\";\r\n\r\nimport GridView from \"./GridView\";\r\n\r\nconst hero = {\r\n  'marginBottom': '50px'\r\n};\r\n\r\nconst backtToTopButton = {\r\n  'bottom': '20px',\r\n  'right': '20px',\r\n  'position': 'fixed',\r\n};\r\n\r\nexport default function Main() {\r\n  const [posts, setPosts] = useState([])\r\n\r\n  let url = process.env.REACT_APP_POSTS_API_URL_PROD;\r\n\r\n  if(process.env.NODE_ENV !== 'production') {\r\n      url = process.env.REACT_APP_POSTS_API_URL_DEVEL;\r\n  }\r\n  \r\n  useEffect(() => {\r\n     axios\r\n      .get(url)\r\n      .then(response => {\r\n        setPosts(response.data);\r\n\r\n      }).catch(error => {\r\n        alert(`${error}`)\r\n\r\n    })\r\n  }, [])\r\n\r\n  const scrollToTop = () => {\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  posts.reverse();\r\n\r\n    return (\r\n        <div>\r\n            <Hero color=\"primary\" style={hero}>\r\n              <Hero.Body>\r\n                <Container>\r\n                  <Title>FlotsamBlog</Title>\r\n                  <Title as=\"h2\" subtitle>\r\n                    Read like you've never read before!\r\n                  </Title>\r\n                </Container>\r\n              </Hero.Body>\r\n            </Hero>\r\n            <GridView posts={posts}></GridView>\r\n            <div>\r\n              <Button style={backtToTopButton} onClick={scrollToTop} color={'primary'}>\r\n                <Icon size=\"small\">\r\n                  <FontAwesomeIcon icon={faChevronUp} />\r\n                </Icon>\r\n              </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Input, Field, Button, Box, Label, Control, Textarea, Select, Container, Help, Icon, Divider, Media, Image} from \"rbx\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faImage } from '@fortawesome/free-solid-svg-icons'\r\nimport { useForm } from \"react-hook-form\";\r\nimport Modali, { useModali } from 'modali';\r\n\r\nconst box = {\r\n    margin: '60px',\r\n};\r\n\r\nconst buttonControls = {\r\n    marginTop: '20px',\r\n};\r\n\r\n\r\nexport default function NewBlogPost(props) {\r\n\r\n    let postUrl = process.env.REACT_APP_POSTS_API_URL_PROD;\r\n    let categoryUrl = process.env.REACT_APP_CATEGORIES_API_URL_PROD;\r\n\r\n    if(process.env.NODE_ENV !== 'production') {\r\n        postUrl = process.env.REACT_APP_POSTS_API_URL_DEVEL;\r\n        categoryUrl = process.env.REACT_APP_CATEGORIES_API_URL_DEVEL;\r\n    }\r\n\r\n    const [id, setId] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [body, setBody] = useState('');\r\n    const [imageUrl, setImageUrl] = useState('https://source.unsplash.com/random/1600x900/?technology');\r\n    const [imageSrc, setImageSrc] = useState('https://source.unsplash.com/random/1600x900/?technology');\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n    const [categories, setCategories] = useState([])\r\n    const [date, setDate] = useState(new Date());\r\n    const [dateMonthYear, setDateMonthYear] = useState(`${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`)\r\n    const [edited, setEdited] = useState(false);\r\n    const { register, handleSubmit, errors } = useForm();\r\n\r\n    const history = useHistory();\r\n\r\n    const [publishModal, togglePublishModal] = useModali({\r\n        animated: true,\r\n        title: `Publish a new post?`,\r\n        message: 'Post will be public',\r\n        buttons: [\r\n          <Modali.Button\r\n            label=\"Cancel\"\r\n            isStyleCancel\r\n            onClick={() => togglePublishModal()}\r\n          />,\r\n          <Modali.Button\r\n            label=\"Publish\"\r\n            isStyleDefault\r\n            onClick={() => handlePostPublish()}\r\n          />,\r\n        ],\r\n      });\r\n\r\n      const [cancelModal, toggleCancelModal] = useModali({\r\n        animated: true,\r\n        title: `Cancel and go to dashboard?`,\r\n        message: 'All modified data will be lost',\r\n        buttons: [\r\n          <Modali.Button\r\n            label=\"Continue writing\"\r\n            isStyleCancel\r\n            onClick={() => toggleCancelModal()}\r\n          />,\r\n          <Modali.Button\r\n            label=\"Go to dashboard\"\r\n            isStyleDestructive\r\n            onClick={() => handleCancel()}\r\n          />,\r\n        ],\r\n      });\r\n\r\n      const [postSuccessModal, togglePostSuccessModal] = useModali({\r\n        animated: true,\r\n        title: `Post ${title} was created/updated`,\r\n        message: 'Return to dashboard or go to home page?',\r\n        onHide: () => {\r\n            history.push({\r\n            pathname: '/dashboard',\r\n        })},\r\n        buttons: [\r\n          <Modali.Button\r\n            label=\"Go to home\"\r\n            isStyleDefault\r\n            onClick={() => goToHome()}\r\n          />,\r\n          <Modali.Button\r\n            label=\"Go to dashboard\"\r\n            isStyleDefault\r\n            onClick={() => goToDashBoard()}\r\n          />,\r\n        ],\r\n      });\r\n\r\n    useEffect(() => {\r\n        axios\r\n         .get(categoryUrl)\r\n         .then(response => {\r\n            setCategories(response.data);\r\n         }).catch(error => {\r\n           alert(`Backend error: ${error}`)\r\n       })\r\n\r\n       if(props.location.state !== undefined) {\r\n            const postData = props.location.state.postData;\r\n            setId(postData.id);\r\n            setTitle(postData.title);\r\n            setDescription(postData.description);\r\n            setBody(postData.body);\r\n            setImageUrl(postData.imageUrl);\r\n            setSelectedCategory(postData.category);\r\n            setDateMonthYear(postData.date);\r\n            setEdited(true);\r\n        }\r\n     }, [])\r\n\r\n\r\n\r\n    const handleChangeTitle = e => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const handleChangeBody = e => {\r\n        let shortDesc = e.target.value.substring(0, 40);\r\n        setDescription(shortDesc);\r\n        setBody(e.target.value);\r\n    }\r\n\r\n    const handleChangeCategory = e => {\r\n        e.preventDefault();\r\n        setSelectedCategory(e.target.value);\r\n    }\r\n\r\n    const handleChangeImageUrl = e => {\r\n        e.preventDefault();\r\n        setImageSrc(e.target.value);\r\n    }\r\n    \r\n    const handleAddImageUrl = e => {\r\n        e.preventDefault();\r\n        setImageUrl(imageSrc);\r\n    }\r\n\r\n   const handlePostPublish = e => {\r\n        if(!edited) {\r\n            setDate(new Date());\r\n            axios\r\n            .post(postUrl, blogpost)\r\n            .then(response => {\r\n                togglePostSuccessModal();\r\n            })\r\n            .catch(error => {\r\n                 console.log(error);\r\n                alert(`Error: Post '${blogpost.title}' was not posted`)\r\n            })\r\n       } else {\r\n            postUrl = postUrl + `${id}`\r\n            axios\r\n            .put(postUrl, blogpost)\r\n            .then(response => {\r\n                togglePostSuccessModal();\r\n                //alert(`Post ${blogpost.title} updated`);\r\n            })\r\n            .catch(error => {\r\n                 console.log(error);\r\n                alert(`Error: Post '${blogpost.title}' was not updated`)\r\n            })\r\n       }\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        togglePublishModal()\r\n        goToDashBoard();\r\n    }\r\n\r\n    const goToDashBoard = () => {\r\n        history.push({\r\n            pathname: '/dashboard',\r\n        })\r\n    }\r\n\r\n    const goToHome= () => {\r\n        history.push({\r\n            pathname: '/',\r\n        })\r\n    }\r\n\r\n    const renderImage = () => {\r\n        return (\r\n            <a href={imageUrl} target=\"_blank\" rel='noreferrer noopener'>\r\n            <Image\r\n                alt=\"Image preview\"\r\n                src={imageUrl}>\r\n            </Image>\r\n            </a>\r\n        );\r\n    }\r\n\r\n    const blogpost = {\r\n        title: title,\r\n        description: description,\r\n        body: body,\r\n        imageUrl: imageUrl,\r\n        date: dateMonthYear,\r\n        category: selectedCategory,\r\n        url: postUrl\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Container breakpoint=\"touch\">\r\n            <Box style={box} >\r\n                <form onSubmit={handleSubmit(togglePublishModal)}>\r\n                    <Field>\r\n                        <Label>Title</Label>\r\n                        <Control>\r\n                            <Input \r\n                                name=\"Title\"\r\n                                placeholder=\"Post title\"\r\n                                value={title}\r\n                                onChange={handleChangeTitle}\r\n                                ref={register({required: true, minLength: 10, maxLength: 60})}\r\n                            />\r\n                            <Help color={'danger'}>{errors.Title?.type === 'required' && \"Title is required\"}</Help>\r\n                            <Help color={'danger'}>{errors.Title?.type === 'minLength' && \"Title is too short\"}</Help>\r\n                            <Help color={'danger'}>{errors.Title?.type === 'maxLength' && \"Title is too long\"}</Help>\r\n                            <Help color={'danger'}>{errors.Title?.type === 'pattern' && \"Must start with capital letter\"}</Help>\r\n                        </Control>\r\n                    </Field>\r\n\r\n                    <Field>\r\n                        <Label>Body</Label>\r\n                        <Control>\r\n                            <Textarea \r\n                                name=\"Body\"\r\n                                rows={15}\r\n                                placeholder=\"Write here\"\r\n                                value={body}\r\n                                onChange={handleChangeBody}\r\n                                ref={register({required: true, minLength: 10, maxLength: 5000})}\r\n                            />\r\n                            <Help color={'danger'}>{errors.Body?.type === 'required' && \"Body is required\"}</Help>\r\n                            <Help color={'danger'}>{errors.Body?.type === 'minLength' && \"Body is too short\"}</Help>\r\n                            <Help color={'danger'}>{errors.Body?.type === 'maxLength' && \"Body is too long\"}</Help>\r\n                        </Control>\r\n                    </Field>\r\n\r\n                    <Field>\r\n                        <Label>Category</Label>\r\n                        <Control>\r\n                            <Select.Container>\r\n                                <Select onChange={handleChangeCategory}>\r\n                                    {categories.map(category => (\r\n                                        <Select.Option key={category.title} value={category.title}>{category.title}</Select.Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Select.Container>\r\n                        </Control>\r\n                    </Field>\r\n\r\n                    <Label>Image</Label>\r\n                    <Field kind=\"addons\">\r\n                        <Control iconLeft>\r\n                            <Input \r\n                                placeholder=\"Image URL\"\r\n                                onChange={handleChangeImageUrl}\r\n                            />\r\n                            <Icon size=\"small\" align=\"left\">\r\n                                <FontAwesomeIcon icon={faImage} />\r\n                            </Icon>\r\n                        </Control>\r\n                        <Control>\r\n                            <Button onClick={handleAddImageUrl} color=\"link\" >Add</Button>\r\n                        </Control>\r\n                    </Field>\r\n\r\n                    <Media>\r\n                    <Media.Item as=\"figure\" align=\"left\">\r\n                        <Image.Container as=\"p\" size={128}>\r\n                            {renderImage()}\r\n                        </Image.Container>\r\n                    </Media.Item>\r\n                    </Media>\r\n\r\n                    <Divider></Divider>\r\n                    \r\n                    <Field kind=\"group\">\r\n                        <Control style={buttonControls}>\r\n                            <Button.Group>\r\n                                <Input as={Button} type=\"submit\" color=\"link\" >Publish</Input>\r\n                                <Button text onClick={toggleCancelModal} >Cancel</Button>\r\n                            </Button.Group>\r\n                        </Control>\r\n                    </Field>\r\n                </form>\r\n                <Modali.Modal {...cancelModal} />\r\n                <Modali.Modal {...publishModal} />\r\n                <Modali.Modal {...postSuccessModal} />\r\n            </Box>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Content, Media, Level, Icon } from \"rbx\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart, faUserCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport axios from 'axios';\r\n\r\nconst media = {\r\n  'margin': '20px',\r\n};\r\n\r\nexport default function Comment(props) {\r\n  let [heartIconColor, setHeartIconColor] = useState('grey')\r\n  const [isCommentLiked, setCommentLiked] = useState(false)\r\n  const [initialized, setInitialized] = useState(false)\r\n\r\n  const { comment } = props;\r\n\r\n  let commentUrl = `${process.env.REACT_APP_COMMENTS_API_URL_PROD}${comment.id}` ;\r\n  \r\n  if(process.env.NODE_ENV !== 'production') {\r\n    commentUrl = process.env.REACT_APP_COMMENTS_API_URL_DEVEL + `${comment.id}`;\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Get liked comments from localstorage and compare to post id\r\n    let likedComments = [];\r\n    if(localStorage.getItem(`likedComments${comment.postId}`)) {\r\n      likedComments = JSON.parse(localStorage.getItem(`likedComments${comment.postId}`));\r\n        \r\n        if(likedComments.includes(comment.id) && !initialized) {\r\n            setCommentLiked(true);\r\n            setHeartIconColor('info')\r\n            setInitialized(true)\r\n        };\r\n    };\r\n  }, [isCommentLiked]);\r\n\r\n  const handleHeartIconClick = e => {\r\n    // Mark comments as liked to local storage\r\n    let likedCommentsInStorage = [];\r\n    if(localStorage.getItem(`likedComments${comment.postId}`)) {\r\n      likedCommentsInStorage = JSON.parse(localStorage.getItem(`likedComments${comment.postId}`));\r\n    }\r\n\r\n    if(!likedCommentsInStorage.includes(comment.id)) {\r\n      likedCommentsInStorage.push(comment.id)\r\n    }\r\n    localStorage.setItem(`likedComments${comment.postId}`, JSON.stringify(likedCommentsInStorage));\r\n\r\n    if (!isCommentLiked) {\r\n      setHeartIconColor('info')\r\n      updateLikes(++comment.likes);\r\n      setCommentLiked(true)\r\n    } else {\r\n      updateLikes(--comment.likes)\r\n      setHeartIconColor('grey')\r\n      setCommentLiked(false)\r\n      localStorage.setItem(`likedComments${comment.postId}`, '')\r\n    }\r\n  }\r\n\r\n  const updateLikes = (e) => {\r\n    const tempComment = {author: comment.author, content: comment.content, date: comment.date, likes: comment.likes, postId: comment.postId}\r\n    axios\r\n     .put(commentUrl, tempComment)\r\n     .then(response => {\r\n     }).catch(error => {\r\n       alert(`${error}`)\r\n   })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    <Media style={media}>\r\n        <Media.Item as=\"figure\" align=\"left\">\r\n            <FontAwesomeIcon size={'3x'} icon={faUserCircle} />\r\n        </Media.Item>\r\n        <Media.Item align=\"content\">\r\n            <Content>\r\n                <p>\r\n                <strong>{comment.author}</strong> <small>@{comment.author}</small>{' '}\r\n                <small>{comment.date}</small>\r\n                <br />\r\n                {comment.content}\r\n                </p>\r\n            </Content>\r\n                <Level breakpoint=\"mobile\">\r\n                    <Level.Item align=\"left\">\r\n                        <Level.Item as=\"a\">\r\n                            <Icon size=\"small\" color={heartIconColor}>\r\n                                <FontAwesomeIcon icon={faHeart} onClick={() => handleHeartIconClick()} />\r\n                            </Icon>\r\n                        </Level.Item>\r\n                        <Content>\r\n                            <small>{comment.likes}</small>\r\n                        </Content>\r\n                    </Level.Item>\r\n            </Level>\r\n        </Media.Item>\r\n    </Media>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Content, Icon, Level, Title, Box, Container, Image, Media, Button, Field, Control, Textarea } from \"rbx\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUserCircle, faHeart } from '@fortawesome/free-solid-svg-icons'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Comment from './Comment';\r\nimport GridView from './GridView'\r\n\r\nimport axios from 'axios';\r\n\r\nconst container = {\r\n  'padding': '16px'\r\n};\r\nconst box = {\r\n  'margin': 'auto',\r\n  'marginTop': '60px',\r\n  'marginBottom': '100px',\r\n  'padding': '48px'\r\n};\r\n\r\nconst imageContainer = {\r\n  'marginTop': '20px',\r\n  'marginBottom': '20px',\r\n};\r\n\r\nconst image = {\r\n  'borderRadius': '5px',\r\n};\r\n\r\nconst body = {\r\n  'whiteSpace': 'pre-line',\r\n  'fontSize': '18px',\r\n};\r\n\r\nconst button = {\r\n  'width': '72%',\r\n  'marginLeft': '5%'\r\n};\r\n\r\nconst likeButton = {\r\n  paddingLeft: '40px',\r\n};\r\n\r\nconst iconHeartText = {\r\n  marginRight: '3px',\r\n};\r\n\r\nconst media = {\r\n  'margin': '20px'\r\n};\r\n\r\nconst title = {\r\n  'paddingTop': '20px',\r\n};\r\n\r\n\r\nconst getLikedPostsFromLocalStorage = () => {\r\n  let likedPostsInStorage = localStorage.getItem('likedPosts');\r\n  if(!likedPostsInStorage) {\r\n      localStorage.setItem('likedPosts', JSON.stringify([]));\r\n  } \r\n\r\n  return JSON.parse(localStorage.getItem('likedPosts'));\r\n}\r\n\r\nexport default function BlogPost(props) {\r\n  const id  = props.match.params.id;\r\n  const [post, setPost] = useState([])\r\n  const [recommendedPosts, setRecommendedPosts] = useState([])\r\n  const [commentsBoxOpen, setCommentBoxOpen] = useState(true);\r\n  const [comments, setComments] = useState([])\r\n  const [commentAreaRef, setCommentAreaRef] = useState('')\r\n  const [heartIconColor, setHeartIconColor] = useState('grey')\r\n  const [ likedPosts, setLikedPosts ] =  useState(getLikedPostsFromLocalStorage())\r\n\r\n  let history = useHistory();\r\n  \r\n  let url = process.env.REACT_APP_POSTS_API_URL_PROD;\r\n  let postUrl = url + `${id}`;\r\n  let commentUrl = process.env.REACT_APP_COMMENTS_API_URL_PROD;\r\n\r\n  if(process.env.NODE_ENV !== 'production') {\r\n      url = process.env.REACT_APP_POSTS_API_URL_DEVEL;\r\n      postUrl = url + `${id}`;\r\n      commentUrl = process.env.REACT_APP_COMMENTS_API_URL_DEVEL;\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchPost();\r\n    fetchComments();\r\n    fetchRecommendations();\r\n\r\n     if(likedPosts.includes(Number(id))) {\r\n        setHeartIconColor('info')\r\n      } else {\r\n        setHeartIconColor('grey')\r\n      }\r\n      \r\n  }, [id])\r\n\r\n  const handleHeartIconClick = e => {\r\n    let likedPostsInStorage = JSON.parse(localStorage.getItem(`likedPosts`));\r\n\r\n    let idAsNumber = Number(id);\r\n\r\n    if(!likedPostsInStorage.includes(idAsNumber)) {\r\n      likedPostsInStorage.push(idAsNumber);\r\n      setHeartIconColor('info')\r\n      updateLikes(++post.postLikes);\r\n\r\n    } else {\r\n      updateLikes(--post.postLikes)\r\n      setHeartIconColor('grey')\r\n\r\n      if(likedPostsInStorage.includes(idAsNumber)) {\r\n        const index = likedPostsInStorage.indexOf(idAsNumber);\r\n        if (index > -1) {\r\n          likedPostsInStorage.splice(index, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    localStorage.setItem(`likedPosts`, JSON.stringify(likedPostsInStorage));\r\n    setLikedPosts(JSON.stringify(likedPostsInStorage));\r\n  }\r\n\r\n  const updateLikes = (e) => {\r\n    const tempPost = {\r\n      title: post.title,\r\n      description: post.description,\r\n      body: post.body,\r\n      date: post.date,\r\n      url: post.url,\r\n      imageUrl: post.imageUrl,\r\n      category: post.category,\r\n      postLikes: post.postLikes\r\n    }\r\n    axios\r\n     .put(postUrl, tempPost)\r\n     .then(response => {\r\n     }).catch(error => {\r\n       alert(`${error}`)\r\n   })\r\n  }\r\n\r\n  const fetchPost = () => {\r\n    axios\r\n     .get(postUrl)\r\n     .then(response => {\r\n       setPost(response.data);\r\n     }).catch(error => {\r\n       alert(`${error}`)\r\n   })\r\n  }\r\n\r\n  const fetchComments = () => {\r\n    axios\r\n     .get(commentUrl)\r\n     .then(response => {\r\n       filterData(response.data);\r\n     }).catch(error => {\r\n       alert(`${error}`)\r\n   })\r\n  }\r\n\r\n  const fetchRecommendations = () => {\r\n    axios\r\n     .get(url)\r\n     .then(response => {\r\n      setRecommendedPosts(randomizePosts(response.data));\r\n     }).catch(error => {\r\n       alert(`${error}`)\r\n   })\r\n  }\r\n\r\n  const randomizePosts = (allPosts) => {\r\n    let randomPosts = [];\r\n    let arr = [];\r\n\r\n    while(arr.length < 3){\r\n        var r = Math.floor(Math.random() * allPosts.length);\r\n        if(r !== Number(id)-1) {\r\n          if(arr.indexOf(r) === -1) arr.push(r);\r\n        }\r\n    }\r\n\r\n    for(let i of arr) {\r\n      randomPosts.push(allPosts[i])\r\n    }\r\n    return randomPosts;\r\n }\r\n \r\n\r\n  const filterData = (data) => {\r\n    const commentArray = [];\r\n    for(let i = 0; i < data.length; i++) {\r\n      if(Number(data[i].postId) === Number(id)) {\r\n        commentArray.push(data[i]);\r\n      }\r\n    }\r\n    setComments(commentArray);\r\n  }\r\n\r\n  const handleCommentPost = (e) => {\r\n    const tempDate = formatDate(new Date().toString())\r\n    const tempContent = commentAreaRef.value\r\n    if (commentAreaRef.value.length > 0) {\r\n      const tempComment = {author: 'Guest515', content: tempContent, date: tempDate, likes: 0, postId: id}\r\n      axios\r\n      .post(commentUrl, tempComment)\r\n      .then(response => {\r\n        commentAreaRef.value = ''\r\n      }).then(() =>\r\n          fetchComments()\r\n      ).catch(error => {\r\n        alert(`${error}`)\r\n      })\r\n    } else {\r\n      alert('Comment length must be at least 1')\r\n    }\r\n  }\r\n\r\n  const formatDate = (date) => {\r\n    var d = new Date(date),\r\n        month = '' + (d.getMonth() + 1),\r\n        day = '' + d.getDate(),\r\n        year = d.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n\r\n    return [year, month, day].join('.');\r\n}\r\n\r\nconst handleClickCategory = e => {\r\n  history.push({\r\n              pathname: '/search',\r\n              state: { query: e.target.lastChild.data}\r\n              })\r\n}\r\n\r\n  return (\r\n    <div>\r\n    <Container breakpoint=\"mobile\" style={container}>\r\n    <Box style={box}>\r\n        \r\n        <Content>\r\n          <Title style={title}>{post.title}</Title>\r\n          <Title size={6} onClick={handleClickCategory}><a>{post.category}</a></Title>\r\n            <p>{post.date}</p>\r\n        </Content>\r\n\r\n          <Image.Container size={'16by9'} style={imageContainer}>\r\n            <Image src={post.imageUrl} style={image}/>\r\n          </Image.Container>\r\n\r\n          <Content style={body}>\r\n            <p>\r\n              {post.body}\r\n            </p>\r\n          </Content>\r\n\r\n          <Level align=\"center\">\r\n              <Button style={button} outlined color={'#333'} key={'#333'} onClick={() => setCommentBoxOpen(!commentsBoxOpen)} >\r\n                View Comments ({comments.length})\r\n              </Button>\r\n              <Icon style={likeButton} color={heartIconColor} as=\"a\">\r\n                  <FontAwesomeIcon style={iconHeartText} size=\"lg\" icon={faHeart} onClick={() => handleHeartIconClick()} />\r\n                  <small>{post.postLikes}</small>\r\n              </Icon>\r\n          </Level>\r\n\r\n\r\n          <Content hidden={commentsBoxOpen} key={comments.id}>\r\n              {comments.map(comment => (\r\n                <Comment key={comment.id} comment={comment} postId={post.id}/>\r\n              ))}\r\n          </Content>\r\n\r\n          <Content hidden={commentsBoxOpen}>\r\n            <Media style={media} as=\"article\">\r\n              <Media.Item align=\"left\">\r\n                <FontAwesomeIcon size={'3x'} icon={faUserCircle} />\r\n              </Media.Item>\r\n              <Media.Item align=\"content\">\r\n                <Field>\r\n                  <Control as=\"p\">\r\n                    <Textarea ref={(textarea) => {setCommentAreaRef(textarea)}} placeholder=\"Add a comment...\" />\r\n                  </Control>\r\n                </Field>\r\n                <Field>\r\n                  <Control as=\"p\">\r\n                    <Button onClick={handleCommentPost}>Post comment</Button>\r\n                  </Control>\r\n                </Field>\r\n              </Media.Item>\r\n            </Media>\r\n          </Content>\r\n\r\n    </Box>\r\n    <Box style={box}>\r\n    <Content>\r\n          <Title style={title}>Recommended posts</Title>\r\n        </Content>\r\n      <GridView posts={recommendedPosts}></GridView>\r\n    </Box>\r\n    </Container>\r\n    </div>\r\n  );\r\n}","import React, { useState } from \"react\";\r\nimport { Field, Input, Box, Control, Button, Title, Label, Container, Help } from \"rbx\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { useAuth } from \"../context/auth\"\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst container = {\r\n  'padding': '16px'\r\n};\r\nconst box = {\r\n  'margin': 'auto',\r\n  'padding': '30px',\r\n  'marginTop': '100px',\r\n  'width': '320px'\r\n};\r\nconst loginbutton = {\r\n  'marginTop': '20px',\r\n};\r\n\r\nexport default function Login(props) {\r\n  const [isLoggedIn, setLoggedIn] = useState(false)\r\n  const [password, setPassword] = useState('')\r\n  const [username, setUsername] = useState('')\r\n  const [loginError, setLoginError] = useState(false)\r\n  const { setAuthTokens } = useAuth();\r\n  const { register, handleSubmit, errors } = useForm();\r\n\r\n  let loginUrl = process.env.REACT_APP_LOGIN_URL_PROD;\r\n\r\n  if(process.env.NODE_ENV !== 'production') {\r\n    loginUrl = process.env.REACT_APP_LOGIN_URL_DEVEL;\r\n  }\r\n  const handleChangeUsername = e => {\r\n    setUsername(e.target.value);\r\n  }\r\n\r\n  const handleChangePassword = e => {\r\n    setPassword(e.target.value);\r\n  }\r\n\r\n  const postLogin = () => {\r\n    let usernameValue = username;\r\n    let passwordValue = password\r\n    let tempData = { username: usernameValue, password: passwordValue }\r\n    axios\r\n    .post(loginUrl, tempData)\r\n    .then(response => {\r\n      if(response.status === 200) {\r\n          if(response.headers.authorization.startsWith(\"Bearer \")) {\r\n            setAuthTokens(response.headers.authorization)\r\n            setLoggedIn(true)\r\n          } \r\n      } else {\r\n        setLoginError(true)\r\n      }\r\n    }).catch(error => {\r\n      setLoginError(true)\r\n    })\r\n  }\r\n  \r\n  const handleKeyPressLogin = (event) => {\r\n    if(event.key === 'Enter'){\r\n      postLogin();\r\n    }\r\n  }\r\n\r\n  if(isLoggedIn) {\r\n    return <Redirect to=\"/dashboard\" />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    <Container breakpoint=\"mobile\" style={container}>\r\n      <Box style={box}>\r\n      <form onSubmit={handleSubmit(postLogin)}>\r\n      <Title>Login</Title>\r\n      <Help color={'danger'}>{loginError && \"Wrong username or password\"}</Help>\r\n      \r\n        <Field align=\"centered\">\r\n          <Label>Username</Label>\r\n          <Control>\r\n            <Input type=\"text\" color={'primary'} name=\"Username\" placeholder=\"Username\" ref={register({required: true})} onKeyDown={handleKeyPressLogin} onChange={handleChangeUsername}/>\r\n            <Help color={'danger'}>{errors.Username && \"Username is required\"}</Help>\r\n          </Control>\r\n        </Field>\r\n\r\n        <Field align=\"centered\">\r\n          <Label>Password</Label>\r\n          <Control>\r\n            <Input type=\"password\" color={'primary'} name=\"Password\" placeholder=\"Password\" ref={register({required: true})} onKeyDown={handleKeyPressLogin} onChange={handleChangePassword}/>\r\n            <Help color={'danger'}>{errors.Password && \"Password is required\"}</Help>\r\n          </Control>\r\n        </Field>\r\n        <Field style={loginbutton}>\r\n          <Control>\r\n            <Input as={Button} type=\"submit\" color=\"primary\" >Login</Input>\r\n          </Control>\r\n        </Field>\r\n        </form>\r\n      </Box>\r\n      </Container>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Table, Box, Button, Title, Icon, Label, Container } from \"rbx\";\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrash, faEdit, faComments, faSignOutAlt, faPen } from '@fortawesome/free-solid-svg-icons'\r\nimport { useAuth } from \"../context/auth\";\r\nimport Modali, { useModali } from 'modali';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst container = {\r\n  'padding': '16px'\r\n};\r\nconst box = {\r\n  'margin': 'auto',\r\n  'padding': '50px',\r\n  'marginTop': '50px',\r\n  'width': '80%',\r\n};\r\nconst newpostbutton = {\r\n  'marginTop': '20px',\r\n  'marginBottom': '20px',\r\n};\r\n\r\nexport default function Dashboard(props) {\r\n  const [posts, setPosts] = useState([])\r\n  const [postToDelete, setPostToDelete] = useState(-1)\r\n  const [postToEdit, setPostToEdit] = useState(-1)\r\n\r\n  const [newpostModal, toggleNewpostModal] = useModali({\r\n    animated: true,\r\n    title: `Create a new post?`,\r\n    message: 'A text editor will be opened',\r\n    buttons: [\r\n      <Modali.Button\r\n        label=\"Cancel\"\r\n        isStyleCancel\r\n        onClick={() => toggleNewpostModal()}\r\n      />,\r\n      <Modali.Button\r\n        label=\"Go to editor\"\r\n        isStyleDefault\r\n        onClick={() => onNewPost()}\r\n      />,\r\n    ],\r\n  });\r\n\r\n\r\n  const [deleteModal, toggleDeleteModal] = useModali({\r\n    animated: true,\r\n    title: `Delete post ${postToDelete}?`,\r\n    message: 'Post will be permanently deleted.',\r\n    buttons: [\r\n      <Modali.Button\r\n        label=\"Cancel\"\r\n        isStyleCancel\r\n        onClick={() => toggleDeleteModal()}\r\n      />,\r\n      <Modali.Button\r\n        label=\"Delete\"\r\n        isStyleDestructive\r\n        onClick={() => onDelete(postToDelete)}\r\n      />,\r\n    ],\r\n  });\r\n\r\n  const [editModal, toggleEditModal] = useModali({\r\n    animated: true,\r\n    title: `Edit post ${postToEdit.id}?`,\r\n    message: 'Post will be modified',\r\n    buttons: [\r\n      <Modali.Button\r\n        label=\"Cancel\"\r\n        isStyleCancel\r\n        onClick={() => toggleEditModal()}\r\n      />,\r\n      <Modali.Button\r\n        label=\"Edit\"\r\n        isStyleDefault\r\n        onClick={() => onEdit(postToEdit)}\r\n      />,\r\n    ],\r\n  });\r\n\r\n  const [logoutModal, toggleLogoutModal] = useModali({\r\n    animated: true,\r\n    title: `Log out?`,\r\n    buttons: [\r\n      <Modali.Button\r\n        label=\"Cancel\"\r\n        isStyleCancel\r\n        onClick={() => toggleLogoutModal()}\r\n      />,\r\n      <Modali.Button\r\n        label=\"Log out\"\r\n        isStyleDestructive\r\n        onClick={() => logOut()}\r\n      />,\r\n    ],\r\n  });\r\n\r\n  \r\n\r\n  let history = useHistory();\r\n  const { setAuthTokens } = useAuth();\r\n\r\n  let url = process.env.REACT_APP_POSTS_API_URL_PROD;\r\n\r\n  if(process.env.NODE_ENV !== 'production') {\r\n      url = process.env.REACT_APP_POSTS_API_URL_DEVEL;\r\n  }\r\n\r\n   useEffect(() => {\r\n    axios\r\n     .get(url)\r\n     .then(response => {\r\n       setPosts(response.data);\r\n     }).catch(error => {\r\n       alert(`${error}`)\r\n   })\r\n }, []) \r\n\r\n function onNewPost() {\r\n  history.push({\r\n    pathname: '/new',\r\n  })\r\n }\r\n\r\n\r\n function onEdit(postData) {\r\n  history.push({\r\n    pathname: '/edit',\r\n    state: { postData: postData }\r\n    })\r\n }\r\n\r\n function onShowComments(postData) {\r\n  history.push({\r\n    pathname: '/comments',\r\n    state: { postData: postData }\r\n    })\r\n }\r\n \r\n function onDelete(id, event) {\r\n  axios\r\n      .delete(url + id)\r\n      .then(response => {\r\n      })\r\n      .catch(error => {\r\n          alert(`Error: Post  was not deleted`)\r\n      })\r\n\r\n      let updatedPosts = [];\r\n      for(let i = 0; i < posts.length; i++) {\r\n        if (posts[i].id === id) {\r\n            console.log(posts[i].id)\r\n            posts.splice(i, 1)\r\n            updatedPosts = posts.splice(0)\r\n            break;\r\n        }\r\n      }\r\n      setPosts(updatedPosts);\r\n      toggleDeleteModal();\r\n}\r\n\r\nfunction shorten(description) {\r\n  let shortDescription = '';\r\n  return shortDescription = description.substring(0, 40) + '...'\r\n}\r\n\r\nfunction logOut() {\r\n  setAuthTokens(\"\");\r\n}\r\n\r\n  return (\r\n    <div>\r\n      <Container breakpoint=\"mobile\" style={container}>\r\n      <Box style={box}>\r\n      <Button.Group align=\"right\" >\r\n        <Button onClick={toggleLogoutModal} color=\"danger\" >\r\n        <Icon size=\"small\">\r\n            <FontAwesomeIcon icon={faSignOutAlt} />\r\n          </Icon>\r\n            <span>Log out</span>\r\n          </Button>\r\n      </Button.Group>\r\n        <Title>Dashboard</Title>\r\n        <Button style={newpostbutton} color={'success'} onClick={(e) => toggleNewpostModal()} >\r\n          <Icon size=\"small\">\r\n            <FontAwesomeIcon icon={faPen} />\r\n          </Icon>\r\n          <span>New post</span>\r\n          </Button>\r\n\r\n        <Label>All posts</Label>\r\n        <Table fullwidth>\r\n          <Table.Head>\r\n            <Table.Row>\r\n              <Table.Heading>ID</Table.Heading>\r\n              <Table.Heading>Title</Table.Heading>\r\n              <Table.Heading>Description</Table.Heading>\r\n              <Table.Heading>Date</Table.Heading>\r\n              <Table.Heading>Comments</Table.Heading>\r\n              <Table.Heading>Edit</Table.Heading>\r\n              <Table.Heading>Remove</Table.Heading>\r\n            </Table.Row>\r\n          </Table.Head>\r\n\r\n          <Table.Body>\r\n          {posts.map(post => (\r\n            <Table.Row key={post.id}>\r\n              <Table.Cell>{post.id}</Table.Cell>\r\n              <Table.Cell>{post.title}</Table.Cell>\r\n              <Table.Cell>{shorten(post.description)}</Table.Cell>\r\n              <Table.Cell>{post.date}</Table.Cell>\r\n              <Table.Cell>\r\n                <Button color=\"info\" onClick={(e) => {onShowComments(post)}}>\r\n                  <Icon>\r\n                      <FontAwesomeIcon icon={faComments} />\r\n                  </Icon>\r\n                </Button>\r\n              </Table.Cell>\r\n              <Table.Cell>\r\n                <Button color=\"info\" onClick={(e) => {\r\n                  setPostToEdit(post)\r\n                  toggleEditModal()\r\n                  }}>\r\n                  <Icon>\r\n                      <FontAwesomeIcon icon={faEdit} />\r\n                  </Icon>\r\n                </Button>\r\n              </Table.Cell>\r\n              <Table.Cell>\r\n                <Button color=\"danger\" onClick={(e) => {\r\n                  setPostToDelete(post.id)\r\n                  toggleDeleteModal()\r\n                  }}>\r\n                  <Icon>\r\n                      <FontAwesomeIcon icon={faTrash} />\r\n                  </Icon>\r\n                </Button>\r\n              </Table.Cell>\r\n            </Table.Row>\r\n            ))}\r\n          </Table.Body>\r\n        </Table>\r\n        <Modali.Modal {...deleteModal} />\r\n        <Modali.Modal {...editModal} />\r\n        <Modali.Modal {...logoutModal} />\r\n        <Modali.Modal {...newpostModal} />\r\n      </Box>\r\n      </Container>\r\n    </div>\r\n  );\r\n}","import React, { useState  } from \"react\";\r\nimport { Button, Control, Input, Field, Icon} from \"rbx\";\r\nimport { useHistory  } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport default function SearchBar() {\r\n    const [postFilter, setPostFilter] = useState('');\r\n    const { register, handleSubmit } = useForm();\r\n\r\n    let history = useHistory();\r\n\r\n    const handleChangeSearchQuery = e => {\r\n      setPostFilter(e.target.value);\r\n    }\r\n\r\n    const handleClickSearch = () => {\r\n      history.push({\r\n        pathname: '/search',\r\n        state: { query: postFilter}\r\n      })\r\n      setPostFilter('')\r\n    }\r\n\r\n    const handleKeyPressSearch = (event) => {\r\n      if(event.key === 'Enter') {\r\n        handleClickSearch();\r\n      }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n          <form onSubmit={handleSubmit(handleClickSearch)}>\r\n            <Field kind=\"addons\">\r\n                <Control>\r\n                    <Input \r\n                        type=\"text\"\r\n                        name=\"Search\"\r\n                        value={postFilter} \r\n                        onChange={handleChangeSearchQuery}\r\n                        onKeyDown={handleKeyPressSearch} \r\n                        placeholder=\"Search posts\" \r\n                        ref={register({required: true, minLength: 1 })}/>\r\n                </Control>\r\n                <Control>\r\n                    <Input as={Button} \r\n                      color=\"primary\"\r\n                      type=\"submit\">\r\n                        <Icon>\r\n                            <FontAwesomeIcon icon={faSearch} />\r\n                        </Icon>\r\n                    </Input>\r\n                </Control>\r\n            </Field>\r\n          </form>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Navbar, Icon, Image} from \"rbx\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faUserCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport Search from './SearchBar'\r\n\r\nexport default function NavBar() {\r\n    const [navbarOpen, setNavbarOpen] = useState(false);\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    let history = useHistory();\r\n\r\n    let categoryUrl = process.env.REACT_APP_CATEGORIES_API_URL_PROD;\r\n\r\n    if(process.env.NODE_ENV !== 'production') {\r\n        categoryUrl = process.env.REACT_APP_CATEGORIES_API_URL_DEVEL;\r\n    }\r\n\r\n    useEffect(() => {\r\n        axios\r\n         .get(categoryUrl)\r\n         .then(response => {\r\n            setCategories(response.data);\r\n         }).catch(error => {\r\n           alert(`Backend error: ${error}`)\r\n        })\r\n\r\n     }, [])\r\n\r\n    const handleClickCategory = e => {\r\n        history.push({\r\n                    pathname: '/search',\r\n                    state: { query: e.target.firstChild.data}\r\n                    })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar fixed='top' active={navbarOpen} >\r\n                <Navbar.Brand>\r\n                    <Navbar.Item as={Link} to=\"/\">\r\n                        <Image src=\"favicon.png\" />\r\n                    </Navbar.Item>\r\n                <Navbar.Burger onClick={() => setNavbarOpen(!navbarOpen)}/>\r\n                </Navbar.Brand>\r\n                \r\n                <Navbar.Menu>\r\n                    <Navbar.Segment align=\"start\">\r\n                         {categories.map(category => (\r\n                            <Navbar.Item\r\n                            key={category.id}\r\n                            onClick={handleClickCategory}>\r\n                                {category.title}\r\n                            </Navbar.Item>\r\n                        ))}\r\n                    </Navbar.Segment>\r\n\r\n                    <Navbar.Segment align=\"end\">\r\n                        <Navbar.Item as='div'>\r\n                            <Search></Search>\r\n                        </Navbar.Item>\r\n\r\n                        <Navbar.Item as='div'>\r\n                            <Icon as={Link} to=\"/dashboard\" color={'primary'}>\r\n                                <FontAwesomeIcon icon={faUserCircle} size=\"lg\"/>\r\n                            </Icon>\r\n                        </Navbar.Item>\r\n                    </Navbar.Segment>\r\n\r\n                </Navbar.Menu>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect  } from \"react\";\r\nimport { Title, Container, Button } from \"rbx\";\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport GridView from \"./GridView\";\r\n\r\n\r\nexport default function SearchResults(props) {\r\n    const [filteredPosts, setFilteredPosts] = useState([]);\r\n    \r\n    let queryData = props.location.state.query;\r\n    let history = useHistory();\r\n    \r\n    let postUrl = process.env.REACT_APP_POSTS_API_URL_PROD;\r\n\r\n    if(process.env.NODE_ENV !== 'production') {\r\n        postUrl = process.env.REACT_APP_POSTS_API_URL_DEVEL;\r\n    }\r\n\r\n    const container = {\r\n        'marginTop': '20px'\r\n    };\r\n\r\n    const button = {\r\n        marginTop: '20px',\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if(props.location.state !== undefined) {\r\n            queryData = props.location.state.query;\r\n            axios\r\n            .get(postUrl)\r\n            .then(response => {\r\n                setFilteredPosts(filter(response.data, queryData)); \r\n            }).catch(error => {\r\n              alert(`${error}`)\r\n          })\r\n        }\r\n     }, [props.location.state.query])\r\n\r\n\r\n     const handleClickBack = e => {\r\n        history.goBack()\r\n    }\r\n\r\n    const filter = (posts, postFilter) => {\r\n        let filtered = []\r\n        filtered = posts.filter( (post) => {\r\n          return post.title.toLowerCase().indexOf(postFilter.toLowerCase())!==-1 || post.category.toLowerCase().indexOf(postFilter.toLowerCase())!==-1\r\n        })\r\n        return filtered;\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Container style={container}>\r\n                <Title>\"{queryData}\"</Title>\r\n                <Title>Results: {filteredPosts.length} </Title>\r\n                <GridView posts={filteredPosts}></GridView>\r\n                <Button style={button} onClick={handleClickBack} >Back</Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Table, Box, Button, Title, Icon, Label } from \"rbx\";\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Modali, { useModali } from 'modali';\r\n\r\nconst box = {\r\n  'margin': 'auto',\r\n  'padding': '50px',\r\n  'marginTop': '50px',\r\n  'maxWidth': '80%'\r\n};\r\n\r\nconst button = {\r\n  marginTop: '20px',\r\n};\r\n\r\nexport default function CommentTable(props) {\r\n  const postData = props.location.state.postData;\r\n  const id = postData.id;\r\n\r\n  let history = useHistory();\r\n  const [comments, setComments] = useState([])\r\n  const [commentToDelete, setCommentToDelete] = useState(-1)\r\n\r\n  const [deleteModal, toggleDeleteModal] = useModali({\r\n    animated: true,\r\n    title: `Delete comment ${commentToDelete}?`,\r\n    message: 'Comment will be permanently deleted.',\r\n    buttons: [\r\n      <Modali.Button\r\n        label=\"Cancel\"\r\n        isStyleCancel\r\n        onClick={() => toggleDeleteModal()}\r\n      />,\r\n      <Modali.Button\r\n        label=\"Delete\"\r\n        isStyleDestructive\r\n        onClick={() => onDelete(commentToDelete)}\r\n      />,\r\n    ],\r\n  });\r\n\r\n  let commentUrl = process.env.REACT_APP_COMMENTS_API_URL_PROD;\r\n\r\n  if(process.env.NODE_ENV !== 'production') {\r\n      commentUrl = process.env.REACT_APP_COMMENTS_API_URL_DEVEL;\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchComments();\r\n  }, [])\r\n\r\n  const handleClickBack = e => {\r\n    history.goBack()\r\n  }\r\n\r\n  const fetchComments = () => {\r\n    axios\r\n     .get(commentUrl)\r\n     .then(response => {\r\n       filterData(response.data);\r\n     }).catch(error => {\r\n       alert(`${error}`)\r\n   })\r\n  }\r\n\r\n  const filterData = (data) => {\r\n    const commentArray = [];\r\n    for(let i = 0; i < data.length; i++) {\r\n      if(Number(data[i].postId) === Number(id)) {\r\n        commentArray.push(data[i]);\r\n      }\r\n    }\r\n    setComments(commentArray);\r\n  }\r\n\r\n  function onDelete(id, event) {\r\n    axios\r\n        .delete(commentUrl + id)\r\n        .then(response => {\r\n\r\n        })\r\n        .catch(error => {\r\n            alert(`Error: Comment  was not deleted`)\r\n        })\r\n  \r\n        let updatedComments = [];\r\n        for(let i = 0; i < comments.length; i++) {\r\n          if (comments[i].id === id) {\r\n              comments.splice(i, 1)\r\n              updatedComments = comments.splice(0)\r\n              break;\r\n          }\r\n        }\r\n        setComments(updatedComments);\r\n        toggleDeleteModal();\r\n  }\r\n\r\n  function shorten(description) {\r\n    if(description.length > 20) {\r\n      let shortDescription = '';\r\n      return shortDescription = description.substring(0, 40) + '...'\r\n    }\r\n    return description\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Box style={box}>\r\n        <Title>Comments for post:</Title>\r\n        <Label>{postData.id} - {postData.title}</Label>\r\n\r\n        <Label>All comments</Label>\r\n\r\n        <Table fullwidth>\r\n          <Table.Head>\r\n            <Table.Row>\r\n              <Table.Heading>ID</Table.Heading>\r\n              <Table.Heading>Comment</Table.Heading>\r\n              <Table.Heading>Likes</Table.Heading>\r\n              <Table.Heading>Date</Table.Heading>\r\n              <Table.Heading>Remove</Table.Heading>\r\n            </Table.Row>\r\n          </Table.Head>\r\n\r\n          <Table.Body>\r\n            {comments.map(comment => (\r\n            <Table.Row key={comment.id}>\r\n              <Table.Cell>{comment.id}</Table.Cell>\r\n              <Table.Cell>{shorten(comment.content)}</Table.Cell>\r\n              <Table.Cell>{comment.likes}</Table.Cell>\r\n              <Table.Cell>{comment.date}</Table.Cell>\r\n              <Table.Cell>\r\n                <Button color=\"danger\" onClick={(e) => {\r\n                    setCommentToDelete(comment.id)\r\n                    toggleDeleteModal()\r\n                    }}>\r\n                  <Icon>\r\n                      <FontAwesomeIcon icon={faTrash} />\r\n                  </Icon>\r\n                </Button>\r\n              </Table.Cell>\r\n            </Table.Row>\r\n            ))}\r\n          </Table.Body>\r\n        </Table>\r\n        <Button style={button} onClick={handleClickBack} >Back</Button>\r\n        <Modali.Modal {...deleteModal} />\r\n        </Box>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport { Title, Container, Level} from \"rbx\";\r\n\r\nconst title = {\r\n    'marginTop': '100px',\r\n}\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div>\r\n            <Container>\r\n            <Level>\r\n                <Level.Item textAlign=\"centered\">\r\n                    <Title style={title}>404 Page not found</Title>\r\n                </Level.Item>\r\n            </Level>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"rbx/index.css\";\r\n\r\nimport { AuthContext } from \"./context/auth\";\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nimport Main from './components/Main';\r\nimport NewBlogPost from './components/NewBlogPost';\r\nimport BlogPost from './components/BlogPost';\r\nimport Login from './components/Login';\r\nimport Dashboard from './components/Dashboard';\r\nimport NavBar from \"./components/NavBar\";\r\nimport SearchResults from './components/SearchResults';\r\nimport CommentTable from './components/CommentTable';\r\nimport NotFound from './components/NotFound';\r\n\r\nexport default function App() {\r\n\r\n  const existingTokens = JSON.parse(localStorage.getItem('tokens'))\r\n  const [authTokens, setAuthTokens] = useState(existingTokens)\r\n\r\n  const setTokens = (data) => {\r\n    localStorage.setItem('tokens', JSON.stringify(data))\r\n    setAuthTokens(data)\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{authTokens, setAuthTokens: setTokens}}>\r\n    <Router>\r\n      <NavBar />\r\n      <div>\r\n          <Switch>\r\n            <Route path=\"/\" exact={true} component={Main}/>\r\n            <Route path=\"/search\" component={SearchResults}/>\r\n            <Route path=\"/posts/:id\" component={BlogPost}/>\r\n            <Route path=\"/login\" component={Login}/>\r\n            <PrivateRoute path=\"/dashboard\" component={Dashboard}/>\r\n            <PrivateRoute path=\"/new\" component={NewBlogPost}/>\r\n            <PrivateRoute path=\"/edit\" component={NewBlogPost}/>\r\n            <PrivateRoute path=\"/comments\" component={CommentTable}/>\r\n            <Route path=\"*\" component={NotFound}/>\r\n          </Switch>\r\n      </div>\r\n    </Router>\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}